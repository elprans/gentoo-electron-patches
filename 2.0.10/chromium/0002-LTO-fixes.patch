From 6e3aa6cd6d54ccb0ebae73dfd3b077a966e7b097 Mon Sep 17 00:00:00 2001
From: Elvis Pranskevichus <elvis@magic.io>
Date: Mon, 21 Aug 2017 10:16:44 -0400
Subject: [PATCH 02/10] LTO fixes

---
 build/config/compiler/BUILD.gn    | 31 +++++++++++++++++++++++++++----
 build/toolchain/gcc_ar_wrapper.py | 12 +++++++++++-
 2 files changed, 38 insertions(+), 5 deletions(-)

diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
index 5b2e5ce93c..f9ae1e7e64 100644
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -505,14 +505,37 @@ config("compiler") {
         ldflags += [ "-Wl,--lto-O0" ]
       }
     } else {
-      cflags += [ "-flto" ]
-      ldflags += [ "-flto" ]
+      # Note: ThinLTO does not currently have this feature implemented
+      # For Full LTO, it provides a measurable runtime speedup of Chrome.
+      if (is_clang) {
+        cflags += [
+          "-flto",
+          "-fwhole-program-vtables"
+        ]
+        ldflags += [
+          "-flto",
+          "-fwhole-program-vtables"
+        ]
+      } else {
+        cflags += [
+          "-flto=4",
+          "-fno-fat-lto-objects",
+          "-fuse-linker-plugin",
+          "--param=lto-partitions=1",
+        ]
+        ldflags += [
+          "-flto=4",
+          "-fno-fat-lto-objects",
+          "-fuse-linker-plugin",
+          "--param=lto-partitions=1",
+        ]
+      }
 
       # Apply a lower LTO optimization level as the default is too slow.
       if (is_linux) {
         if (use_lld) {
           ldflags += [ "-Wl,--lto-O1" ]
-        } else {
+        } else if (is_clang) {
           ldflags += [ "-Wl,-plugin-opt,O1" ]
         }
       } else if (is_mac) {
@@ -535,7 +558,7 @@ config("compiler") {
     # Also, when targeting ARM, without this flag, LTO produces a .text section
     # that is larger than the maximum call displacement, preventing the linker
     # from relocating calls (http://llvm.org/PR22999).
-    if (is_linux) {
+    if (is_linux && is_clang) {
       if (use_lld) {
         ldflags += [
           "-Wl,-mllvm,-function-sections",
diff --git a/build/toolchain/gcc_ar_wrapper.py b/build/toolchain/gcc_ar_wrapper.py
index 1c29df23e5..3b22cbfe7c 100755
--- a/build/toolchain/gcc_ar_wrapper.py
+++ b/build/toolchain/gcc_ar_wrapper.py
@@ -59,7 +59,17 @@ def main():
 
   command = [args.ar] + object_mode + [args.operation]
   if args.plugin is not None:
-    command += ['--plugin', args.plugin]
+    if args.plugin == 'auto':
+      gcc = os.environ.get('CC', '/usr/bin/cc')
+      gcc_ver = subprocess.check_output([gcc, '-dumpversion'],
+                                        universal_newlines=True)
+      gcc_ver = gcc_ver.strip(' \n')
+      plugin = '/usr/libexec/gcc/x86_64-pc-linux-gnu/{}/liblto_plugin.so'. \
+        format(gcc_ver)
+    else:
+      plugin = args.plugin
+
+    command += ['--plugin', plugin]
   command.append(args.output)
   command += args.inputs
 
-- 
2.19.0

