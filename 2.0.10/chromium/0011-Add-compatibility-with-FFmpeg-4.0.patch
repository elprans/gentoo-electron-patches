From 12bcc4cbfeb1fbfeb16086269b87c16a49b1bf45 Mon Sep 17 00:00:00 2001
From: Elvis Pranskevichus <elvis@magic.io>
Date: Sat, 2 Feb 2019 13:26:31 -0500
Subject: [PATCH] Add compatibility with FFmpeg 4.0

Upstream backports:

    From f673873becabef1261ec837c4509c3b22b805ea6 Mon Sep 17 00:00:00 2001
    From: Dale Curtis <dalecurtis@chromium.org>
    Date: Fri, 10 Nov 2017 00:29:10 +0000
    Subject: [PATCH] Roll FFmpeg for M64.

    BUG=777555
    TEST=cq

    Change-Id: I8343b5afab16dfcf7d0f7438a675593ddef5f30b
    Reviewed-on: https://chromium-review.googlesource.com/754261
    Commit-Queue: Dale Curtis <dalecurtis@chromium.org>
    Reviewed-by: Chrome Cunningham <chcunningham@chromium.org>
    Cr-Commit-Position: refs/heads/master@{#515365}
    ---
     DEPS                                          |  2 +-
     .../ffmpeg_cdm_audio_decoder.cc               | 23 ++++++++++++-------
     .../ffmpeg_cdm_video_decoder.cc               |  5 ++--
     media/ffmpeg/ffmpeg_common.cc                 | 12 +++++-----
     media/ffmpeg/ffmpeg_common.h                  | 15 ------------
     media/ffmpeg/ffmpeg_decoding_loop.cc          |  1 +
     .../filters/ffmpeg_aac_bitstream_converter.cc |  3 ++-
     media/filters/ffmpeg_audio_decoder.cc         |  3 +--
     media/filters/ffmpeg_demuxer_unittest.cc      |  7 +++---
     ...peg_h264_to_annex_b_bitstream_converter.cc |  3 ++-
     ...peg_h265_to_annex_b_bitstream_converter.cc |  3 ++-
     media/filters/ffmpeg_video_decoder.cc         |  4 +---
     12 files changed, 37 insertions(+), 44 deletions(-)

    From a568ded46a678eac8139cb06595819c5ae874177 Mon Sep 17 00:00:00 2001
    From: Xiaohan Wang <xhwang@chromium.org>
    Date: Mon, 29 Jan 2018 21:28:28 +0000
    Subject: [PATCH] media: Increase DecoderBuffer::kPaddingSize to 64

    AV_INPUT_BUFFER_PADDING_SIZE has been increased to 64 in FFmpeg:
    https://github.com/FFmpeg/FFmpeg/commit/6e80079a2840ee407c5d126030eb1066bcbfdfc5

    BUG=777484

    Change-Id: I1bd68d1c1b0c3131f28d6e07e1444b89800c09db
    Reviewed-on: https://chromium-review.googlesource.com/889686
    Reviewed-by: Dale Curtis <dalecurtis@chromium.org>
    Commit-Queue: Xiaohan Wang <xhwang@chromium.org>
    Cr-Commit-Position: refs/heads/master@{#532593}
    ---
     media/base/decoder_buffer.h | 2 +-
     1 file changed, 1 insertion(+), 1 deletion(-)
---
 media/base/decoder_buffer.h                       |  2 +-
 .../ffmpeg_cdm_audio_decoder.cc                   |  4 ++--
 .../ffmpeg_cdm_video_decoder.cc                   |  5 ++---
 media/ffmpeg/ffmpeg_common.cc                     | 12 ++++++------
 media/ffmpeg/ffmpeg_common.h                      | 15 ---------------
 media/filters/ffmpeg_aac_bitstream_converter.cc   |  3 ++-
 media/filters/ffmpeg_audio_decoder.cc             |  3 +--
 media/filters/ffmpeg_demuxer_unittest.cc          |  7 ++++---
 .../ffmpeg_h264_to_annex_b_bitstream_converter.cc |  3 ++-
 .../ffmpeg_h265_to_annex_b_bitstream_converter.cc |  3 ++-
 media/filters/ffmpeg_video_decoder.cc             |  4 +---
 11 files changed, 23 insertions(+), 38 deletions(-)

diff --git a/media/base/decoder_buffer.h b/media/base/decoder_buffer.h
index 0341e5784f..60ffba708b 100644
--- a/media/base/decoder_buffer.h
+++ b/media/base/decoder_buffer.h
@@ -37,7 +37,7 @@ class MEDIA_EXPORT DecoderBuffer
     : public base::RefCountedThreadSafe<DecoderBuffer> {
  public:
   enum {
-    kPaddingSize = 32,
+    kPaddingSize = 64,
 #if defined(ARCH_CPU_ARM_FAMILY)
     kAlignmentSize = 16
 #else
diff --git a/media/cdm/ppapi/external_clear_key/ffmpeg_cdm_audio_decoder.cc b/media/cdm/ppapi/external_clear_key/ffmpeg_cdm_audio_decoder.cc
index 5971c0cf20..6ac4c5f26e 100644
--- a/media/cdm/ppapi/external_clear_key/ffmpeg_cdm_audio_decoder.cc
+++ b/media/cdm/ppapi/external_clear_key/ffmpeg_cdm_audio_decoder.cc
@@ -71,11 +71,11 @@ static void CdmAudioDecoderConfigToAVCodecContext(
   if (config.extra_data) {
     codec_context->extradata_size = config.extra_data_size;
     codec_context->extradata = reinterpret_cast<uint8_t*>(
-        av_malloc(config.extra_data_size + FF_INPUT_BUFFER_PADDING_SIZE));
+        av_malloc(config.extra_data_size + AV_INPUT_BUFFER_PADDING_SIZE));
     memcpy(codec_context->extradata, config.extra_data,
            config.extra_data_size);
     memset(codec_context->extradata + config.extra_data_size, '\0',
-           FF_INPUT_BUFFER_PADDING_SIZE);
+           AV_INPUT_BUFFER_PADDING_SIZE);
   } else {
     codec_context->extradata = NULL;
     codec_context->extradata_size = 0;
diff --git a/media/cdm/ppapi/external_clear_key/ffmpeg_cdm_video_decoder.cc b/media/cdm/ppapi/external_clear_key/ffmpeg_cdm_video_decoder.cc
index 3f1497c708..fcd8c3cf12 100644
--- a/media/cdm/ppapi/external_clear_key/ffmpeg_cdm_video_decoder.cc
+++ b/media/cdm/ppapi/external_clear_key/ffmpeg_cdm_video_decoder.cc
@@ -101,11 +101,11 @@ static void CdmVideoDecoderConfigToAVCodecContext(
   if (config.extra_data) {
     codec_context->extradata_size = config.extra_data_size;
     codec_context->extradata = reinterpret_cast<uint8_t*>(
-        av_malloc(config.extra_data_size + FF_INPUT_BUFFER_PADDING_SIZE));
+        av_malloc(config.extra_data_size + AV_INPUT_BUFFER_PADDING_SIZE));
     memcpy(codec_context->extradata, config.extra_data,
            config.extra_data_size);
     memset(codec_context->extradata + config.extra_data_size, 0,
-           FF_INPUT_BUFFER_PADDING_SIZE);
+           AV_INPUT_BUFFER_PADDING_SIZE);
   } else {
     codec_context->extradata = NULL;
     codec_context->extradata_size = 0;
@@ -164,7 +164,6 @@ bool FFmpegCdmVideoDecoder::Initialize(const cdm::VideoDecoderConfig& config) {
   codec_context_->err_recognition = AV_EF_CAREFUL;
   codec_context_->thread_count = kDecodeThreads;
   codec_context_->opaque = this;
-  codec_context_->flags |= CODEC_FLAG_EMU_EDGE;
 
   AVCodec* codec = avcodec_find_decoder(codec_context_->codec_id);
   if (!codec) {
diff --git a/media/ffmpeg/ffmpeg_common.cc b/media/ffmpeg/ffmpeg_common.cc
index 61d0bc341c..d79c694555 100644
--- a/media/ffmpeg/ffmpeg_common.cc
+++ b/media/ffmpeg/ffmpeg_common.cc
@@ -30,10 +30,10 @@ EncryptionScheme GetEncryptionScheme(const AVStream* stream) {
 
 }  // namespace
 
-// Why FF_INPUT_BUFFER_PADDING_SIZE? FFmpeg assumes all input buffers are
+// Why AV_INPUT_BUFFER_PADDING_SIZE? FFmpeg assumes all input buffers are
 // padded. Check here to ensure FFmpeg only receives data padded to its
 // specifications.
-static_assert(DecoderBuffer::kPaddingSize >= FF_INPUT_BUFFER_PADDING_SIZE,
+static_assert(DecoderBuffer::kPaddingSize >= AV_INPUT_BUFFER_PADDING_SIZE,
               "DecoderBuffer padding size does not fit ffmpeg requirement");
 
 // Alignment requirement by FFmpeg for input and output buffers. This need to
@@ -444,11 +444,11 @@ void AudioDecoderConfigToAVCodecContext(const AudioDecoderConfig& config,
   } else {
     codec_context->extradata_size = config.extra_data().size();
     codec_context->extradata = reinterpret_cast<uint8_t*>(
-        av_malloc(config.extra_data().size() + FF_INPUT_BUFFER_PADDING_SIZE));
+        av_malloc(config.extra_data().size() + AV_INPUT_BUFFER_PADDING_SIZE));
     memcpy(codec_context->extradata, &config.extra_data()[0],
            config.extra_data().size());
     memset(codec_context->extradata + config.extra_data().size(), '\0',
-           FF_INPUT_BUFFER_PADDING_SIZE);
+           AV_INPUT_BUFFER_PADDING_SIZE);
   }
 }
 
@@ -585,11 +585,11 @@ void VideoDecoderConfigToAVCodecContext(
   } else {
     codec_context->extradata_size = config.extra_data().size();
     codec_context->extradata = reinterpret_cast<uint8_t*>(
-        av_malloc(config.extra_data().size() + FF_INPUT_BUFFER_PADDING_SIZE));
+        av_malloc(config.extra_data().size() + AV_INPUT_BUFFER_PADDING_SIZE));
     memcpy(codec_context->extradata, &config.extra_data()[0],
            config.extra_data().size());
     memset(codec_context->extradata + config.extra_data().size(), '\0',
-           FF_INPUT_BUFFER_PADDING_SIZE);
+           AV_INPUT_BUFFER_PADDING_SIZE);
   }
 }
 
diff --git a/media/ffmpeg/ffmpeg_common.h b/media/ffmpeg/ffmpeg_common.h
index 21fa8daec9..ec33068fb8 100644
--- a/media/ffmpeg/ffmpeg_common.h
+++ b/media/ffmpeg/ffmpeg_common.h
@@ -24,22 +24,7 @@
 
 // Include FFmpeg header files.
 extern "C" {
-#if !BUILDFLAG(USE_SYSTEM_FFMPEG)
-// Disable deprecated features which result in spammy compile warnings.  This
-// list of defines must mirror those in the 'defines' section of FFmpeg's
-// BUILD.gn file or the headers below will generate different structures!
-#define FF_API_CONVERGENCE_DURATION 0
-#endif  // !BUILDFLAG(USE_SYSTEM_FFMPEG)
-// Upstream libavcodec/utils.c still uses the deprecated
-// av_dup_packet(), causing deprecation warnings.
-// The normal fix for such things is to disable the feature as below,
-// but the upstream code does not yet compile with it disabled.
-// (In this case, the fix is replacing the call with a new function.)
-// In the meantime, we directly disable those warnings in the C file.
-//#define FF_API_AVPACKET_OLD_API 0
-
 // Temporarily disable possible loss of data warning.
-// TODO(scherkus): fix and upstream the compiler warnings.
 MSVC_PUSH_DISABLE_WARNING(4244);
 #include <libavcodec/avcodec.h>
 #include <libavformat/avformat.h>
diff --git a/media/filters/ffmpeg_aac_bitstream_converter.cc b/media/filters/ffmpeg_aac_bitstream_converter.cc
index 0c84f485c2..0c9318ee60 100644
--- a/media/filters/ffmpeg_aac_bitstream_converter.cc
+++ b/media/filters/ffmpeg_aac_bitstream_converter.cc
@@ -239,7 +239,8 @@ bool FFmpegAACBitstreamConverter::ConvertPacket(AVPacket* packet) {
 
   // Release the old packet.
   av_packet_unref(packet);
-  *packet = dest_packet;  // Finally, replace the values in the input packet.
+  // Finally, replace the values in the input packet.
+  memcpy(packet, &dest_packet, sizeof(*packet));
 
   return true;
 }
diff --git a/media/filters/ffmpeg_audio_decoder.cc b/media/filters/ffmpeg_audio_decoder.cc
index b4020b001d..b122bf5146 100644
--- a/media/filters/ffmpeg_audio_decoder.cc
+++ b/media/filters/ffmpeg_audio_decoder.cc
@@ -323,7 +323,6 @@ bool FFmpegAudioDecoder::ConfigureDecoder(const AudioDecoderConfig& config) {
 
   codec_context_->opaque = this;
   codec_context_->get_buffer2 = GetAudioBufferImpl;
-  codec_context_->refcounted_frames = 1;
 
   if (config.codec() == kCodecOpus)
     codec_context_->request_sample_fmt = AV_SAMPLE_FMT_FLT;
@@ -368,7 +367,7 @@ void FFmpegAudioDecoder::ResetTimestampState(const AudioDecoderConfig& config) {
 int FFmpegAudioDecoder::GetAudioBuffer(struct AVCodecContext* s,
                                        AVFrame* frame,
                                        int flags) {
-  DCHECK(s->codec->capabilities & CODEC_CAP_DR1);
+  DCHECK(s->codec->capabilities & AV_CODEC_CAP_DR1);
   DCHECK_EQ(s->codec_type, AVMEDIA_TYPE_AUDIO);
 
   // Since this routine is called by FFmpeg when a buffer is required for audio
diff --git a/media/filters/ffmpeg_demuxer_unittest.cc b/media/filters/ffmpeg_demuxer_unittest.cc
index b4cd8b5a3e..2eb539daf3 100644
--- a/media/filters/ffmpeg_demuxer_unittest.cc
+++ b/media/filters/ffmpeg_demuxer_unittest.cc
@@ -845,7 +845,8 @@ TEST_F(FFmpegDemuxerTest, Read_AudioNegativeStartTimeAndOpusSfxDiscard_Sync) {
   }
 }
 
-TEST_F(FFmpegDemuxerTest, Read_DiscardDisabledVideoStream) {
+// WebM text track discarding doesn't work in ffmpeg. http://crbug.com/681886.
+TEST_F(FFmpegDemuxerTest, DISABLED_Read_DiscardDisabledTextStream) {
   // Verify that disabling the video stream properly marks it as AVDISCARD_ALL
   // in FFmpegDemuxer. The AVDISCARD_ALL flag allows FFmpeg to ignore key frame
   // requirements for the disabled stream and thus allows to select the seek
@@ -1081,11 +1082,11 @@ TEST_F(FFmpegDemuxerTest, SeekText) {
   base::RunLoop().Run();
 
   // Text read #1.
-  text_stream->Read(NewReadCB(FROM_HERE, 19, 500000, true));
+  text_stream->Read(NewReadCB(FROM_HERE, 19, 1000000, true));
   base::RunLoop().Run();
 
   // Text read #2.
-  text_stream->Read(NewReadCB(FROM_HERE, 19, 1000000, true));
+  text_stream->Read(NewReadCB(FROM_HERE, 19, 1500000, true));
   base::RunLoop().Run();
 }
 
diff --git a/media/filters/ffmpeg_h264_to_annex_b_bitstream_converter.cc b/media/filters/ffmpeg_h264_to_annex_b_bitstream_converter.cc
index 5f59c9c609..9dbaeb2227 100644
--- a/media/filters/ffmpeg_h264_to_annex_b_bitstream_converter.cc
+++ b/media/filters/ffmpeg_h264_to_annex_b_bitstream_converter.cc
@@ -73,7 +73,8 @@ bool FFmpegH264ToAnnexBBitstreamConverter::ConvertPacket(AVPacket* packet) {
 
   // At the end we must destroy the old packet.
   av_packet_unref(packet);
-  *packet = dest_packet;  // Finally, replace the values in the input packet.
+  // Finally, replace the values in the input packet.
+  memcpy(packet, &dest_packet, sizeof(*packet));
 
   return true;
 }
diff --git a/media/filters/ffmpeg_h265_to_annex_b_bitstream_converter.cc b/media/filters/ffmpeg_h265_to_annex_b_bitstream_converter.cc
index a99dc26ee1..6b300b428b 100644
--- a/media/filters/ffmpeg_h265_to_annex_b_bitstream_converter.cc
+++ b/media/filters/ffmpeg_h265_to_annex_b_bitstream_converter.cc
@@ -86,7 +86,8 @@ bool FFmpegH265ToAnnexBBitstreamConverter::ConvertPacket(AVPacket* packet) {
 
   // At the end we must destroy the old packet.
   av_packet_unref(packet);
-  *packet = dest_packet;  // Finally, replace the values in the input packet.
+  // Finally, replace the values in the input packet.
+  memcpy(packet, &dest_packet, sizeof(*packet));
 
   return true;
 }
diff --git a/media/filters/ffmpeg_video_decoder.cc b/media/filters/ffmpeg_video_decoder.cc
index 42d044dd69..808dab1a91 100644
--- a/media/filters/ffmpeg_video_decoder.cc
+++ b/media/filters/ffmpeg_video_decoder.cc
@@ -427,12 +427,10 @@ bool FFmpegVideoDecoder::ConfigureDecoder(const VideoDecoderConfig& config,
   codec_context_->thread_type =
       FF_THREAD_SLICE | (low_delay ? 0 : FF_THREAD_FRAME);
   codec_context_->opaque = this;
-  codec_context_->flags |= CODEC_FLAG_EMU_EDGE;
   codec_context_->get_buffer2 = GetVideoBufferImpl;
-  codec_context_->refcounted_frames = 1;
 
   if (decode_nalus_)
-    codec_context_->flags2 |= CODEC_FLAG2_CHUNKS;
+    codec_context_->flags2 |= AV_CODEC_FLAG2_CHUNKS;
 
   AVCodec* codec = avcodec_find_decoder(codec_context_->codec_id);
   if (!codec || avcodec_open2(codec_context_.get(), codec, NULL) < 0) {
-- 
2.19.2

