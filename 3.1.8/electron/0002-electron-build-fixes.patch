From aca257cfd85e22d34d08a60a853e63b8eed85741 Mon Sep 17 00:00:00 2001
From: Elvis Pranskevichus <elvis@magic.io>
Date: Mon, 8 Feb 2016 15:16:40 -0500
Subject: [PATCH 2/2] electron build fixes

---
 atom/browser/api/atom_api_browser_view.h |   2 +-
 brightray/brightray.gyp                  | 108 +++++++++++++++++++----
 brightray/brightray.gypi                 |  30 ++++---
 common.gypi                              |  46 +++++++---
 electron.gyp                             |  68 +++++++++++---
 toolchain.gypi                           |  36 +++++++-
 tools/ar-flags.py                        |  15 ++++
 tools/atom_source_root.py                |   5 ++
 tools/browserify.py                      |  24 +++++
 tools/get-endianness.py                  |   4 +
 tools/js2asar.py                         |  13 +--
 11 files changed, 288 insertions(+), 63 deletions(-)
 create mode 100644 tools/ar-flags.py
 create mode 100644 tools/atom_source_root.py
 create mode 100644 tools/browserify.py
 create mode 100644 tools/get-endianness.py

diff --git a/atom/browser/api/atom_api_browser_view.h b/atom/browser/api/atom_api_browser_view.h
index da99c5175..a3a528800 100644
--- a/atom/browser/api/atom_api_browser_view.h
+++ b/atom/browser/api/atom_api_browser_view.h
@@ -36,7 +36,7 @@ class BrowserView : public mate::TrackableObject<BrowserView> {
   static void BuildPrototype(v8::Isolate* isolate,
                              v8::Local<v8::FunctionTemplate> prototype);
 
-  WebContents* web_contents() const { return api_web_contents_; }
+  class WebContents* web_contents() const { return api_web_contents_; }
   NativeBrowserView* view() const { return view_.get(); }
 
   int32_t ID() const;
diff --git a/brightray/brightray.gyp b/brightray/brightray.gyp
index 3dbc3c906..1cd051620 100644
--- a/brightray/brightray.gyp
+++ b/brightray/brightray.gyp
@@ -1,7 +1,7 @@
 {
   'variables': {
     # The libraries brightray will be compiled to.
-    'linux_system_libraries': 'gtk+-3.0 atk-bridge-2.0 dbus-1 x11 x11-xcb xcb xi xcursor xdamage xrandr xcomposite xext xfixes xrender xtst xscrnsaver gconf-2.0 gmodule-2.0 nss',
+    'linux_system_libraries': 'gtk+-3.0 atk-bridge-2.0 dbus-1 x11 x11-xcb xcb xi xcursor xdamage xrandr xcomposite xext xfixes xrender xtst xscrnsaver gmodule-2.0 nss',
     'conditions': [
       ['target_arch=="mips64el"', {
         'linux_system_libraries': '<(linux_system_libraries) libpulse',
@@ -14,6 +14,11 @@
   'targets': [
     {
       'target_name': 'brightray',
+      'dependencies': [
+        'cups',
+        'gconf',
+        'icu',
+      ],
       'type': 'static_library',
       'include_dirs': [
         '..',
@@ -55,14 +60,13 @@
       'conditions': [
         # Link with libraries of libchromiumcontent.
         ['OS=="linux" and libchromiumcontent_component==0', {
-          # On Linux we have to use "--whole-archive" to force executable
-          # to include all symbols, otherwise we will have plenty of
+          # On Linux we have to use "--start-group", otherwise we will have plenty of
           # unresolved symbols errors.
-          'direct_dependent_settings': {
-            'ldflags': [
-              '-Wl,--whole-archive',
+          'link_settings': {
+            'libraries': [
+              '-Wl,--start-group',
               '<@(libchromiumcontent_libraries)',
-              '-Wl,--no-whole-archive',
+              '-Wl,--end-group',
             ],
           }
         }, {  # (Release build on Linux)
@@ -132,7 +136,7 @@
                   # On Linux we have to use "--whole-archive" to include
                   # all symbols, otherwise there will be plenty of
                   # unresolved symbols errors.
-                  '-Wl,--whole-archive',
+                  '-Wl,--start-group',
                   '<(libchromiumcontent_dir)/libpdf.a',
                   '<(libchromiumcontent_dir)/libppapi_cpp_objects.a',
                   '<(libchromiumcontent_dir)/libppapi_internal_module.a',
@@ -150,24 +154,41 @@
                   '<(libchromiumcontent_dir)/libfx_agg.a',
                   '<(libchromiumcontent_dir)/libfx_lcms2.a',
                   '<(libchromiumcontent_dir)/libfx_libopenjpeg.a',
-                  '-Wl,--no-whole-archive',
+                  '<(libchromiumcontent_dir)/libfx_zlib.a',
+                  '-Wl,--end-group',
                   '<(libchromiumcontent_dir)/libchrome.a',
                 ],
               },
             }, {
               'link_settings': {
                 'libraries': [
-                  # Link with ffmpeg.
-                  '<(libchromiumcontent_dir)/libffmpeg.so',
                   # Following libraries are required by libchromiumcontent:
                   '-lasound',
                   '-lcap',
-                  '-lcups',
                   '-lrt',
                   '-ldl',
+                  '-lz',
                   '-lresolv',
                   '-lfontconfig',
                   '-lexpat',
+                  '-lre2',
+                  '-ljpeg',
+                  '-lsnappy',
+                  '-lharfbuzz',
+                  '-lpng',
+                  '-lxml2',
+                  '-lxslt',
+                  '-lwebp',
+                  '-lwebpdemux',
+                  '-lwebpmux',
+                  '-lavcodec',
+                  '-lavformat',
+                  '-lavutil',
+                  '-lvpx',
+                  '-lFLAC',
+                  '-lopus',
+                  '-lopenh264',
+                  '-lminizip',
                 ],
               },
             }],
@@ -197,8 +218,6 @@
               # Required by webrtc:
               '$(SDKROOT)/System/Library/Frameworks/OpenGL.framework',
               '$(SDKROOT)/System/Library/Frameworks/IOKit.framework',
-              # Required by media:
-              '$(SDKROOT)/System/Library/Frameworks/VideoToolbox.framework',
             ],
           },
           'conditions':  [
@@ -286,8 +305,6 @@
                   '$(SDKROOT)/System/Library/Frameworks/IOBluetooth.framework',
                   # components/wifi/BUILD.gn:
                   '$(SDKROOT)/System/Library/Frameworks/CoreWLAN.framework',
-                  # printing/BUILD.gn:
-                  '-lcups',
                 ],
               },
             }],
@@ -455,5 +472,64 @@
         }],  # OS=="win"
       ],
     },
+    {
+      'target_name': 'gconf',
+      'type': 'none',
+      'conditions': [
+        ['use_gconf==1 and _toolset=="target"', {
+          'direct_dependent_settings': {
+            'cflags': [
+              '<!@(<(pkg-config) --cflags gconf-2.0)',
+            ],
+            'defines': [
+              'USE_GCONF',
+            ],
+          },
+          'link_settings': {
+            'ldflags': [
+              '<!@(<(pkg-config) --libs-only-L --libs-only-other gconf-2.0)',
+            ],
+            'libraries': [
+              '<!@(<(pkg-config) --libs-only-l gconf-2.0)',
+            ],
+          },
+        }],
+      ],
+    },
+    {
+      'target_name': 'cups',
+      'type': 'none',
+      'conditions': [
+        ['use_cups==1', {
+          'direct_dependent_settings': {
+            'defines': [
+              'USE_CUPS',
+            ],
+            'link_settings': {
+              'libraries': [
+                '-lcups',
+              ],
+            },
+          },
+        }],
+      ],
+    },
+    {
+      'target_name': 'icu',
+      'type': 'none',
+      'conditions': [
+        ['use_system_icu==1', {
+          'direct_dependent_settings': {
+            'link_settings': {
+              'libraries': [
+                '-licui18n',
+                '-licuuc',
+                '-licudata',
+              ],
+            },
+          },
+        }],
+      ],
+    },
   ],
 }
diff --git a/brightray/brightray.gypi b/brightray/brightray.gypi
index 33d42bc80..9a3513884 100644
--- a/brightray/brightray.gypi
+++ b/brightray/brightray.gypi
@@ -1,6 +1,6 @@
 {
   'includes': [
-    '../vendor/download/libchromiumcontent/filenames.gypi',
+    '../vendor/libchromiumcontent/dist/main/filenames.gypi',
   ],
   'variables': {
     'libchromiumcontent_component%': 1,
@@ -14,7 +14,7 @@
       }, {
         'libchromiumcontent_dir%': '<(libchromiumcontent_static_libraries_dir)',
         'libchromiumcontent_libraries%': '<(libchromiumcontent_static_libraries)',
-        'libchromiumcontent_v8_libraries%': '<(libchromiumcontent_static_v8_libraries)',
+        'libchromiumcontent_v8_libraries%': '<(libchromiumcontent_shared_v8_libraries)',
       }],
     ],
   },
@@ -274,26 +274,16 @@
         'conditions': [
           ['OS=="linux"', {
             'cflags': [
-              '-O2',
-              # Generate symbols, will be stripped later.
-              '-g',
-              # Don't emit the GCC version ident directives, they just end up
-              # in the .comment section taking up binary size.
-              '-fno-ident',
               # Put data and code in their own sections, so that unused symbols
               # can be removed at link time with --gc-sections.
               '-fdata-sections',
               '-ffunction-sections',
             ],
             'ldflags': [
-              # Specifically tell the linker to perform optimizations.
-              # See http://lwn.net/Articles/192624/ .
-              '-Wl,-O1',
-              '-Wl,--as-needed',
               '-Wl,--gc-sections',
             ],
           }],  # OS=="linux"
-          ['OS=="linux" and target_arch in ["ia32", "x64", "arm64"]', {
+          ['use_lto==1 and OS=="linux" and target_arch in ["ia32", "x64", "arm64"] and clang==1', {
             'cflags': [
               '-flto=thin',
             ],
@@ -305,6 +295,20 @@
               '-Wl,-mllvm,-data-sections',
             ],
           }],
+          ['use_lto==1 and OS=="linux" and target_arch in ["ia32", "x64", "arm64"] and clang==0', {
+            'cflags': [
+              '-flto',
+              '-fno-fat-lto-objects',
+              '-fuse-linker-plugin',
+              '--param=lto-partitions=1',
+            ],
+            'ldflags': [
+              '-flto',
+              '-fno-fat-lto-objects',
+              '-fuse-linker-plugin',
+              '--param=lto-partitions=1',
+            ],
+          }],
         ],
       },  # Release_Base
       'conditions': [
diff --git a/common.gypi b/common.gypi
index 676d1e904..4e54c5725 100644
--- a/common.gypi
+++ b/common.gypi
@@ -2,6 +2,7 @@
   'includes': [
     'toolchain.gypi',
     'brightray/brightray.gypi',
+    'vendor/node/common.gypi',
   ],
   'variables': {
     # Tell crashpad to build as external project.
@@ -22,25 +23,22 @@
     'openssl_product': 'libopenssl.a',
     'node_debug_lib': 'false',
     'node_release_urlbase': 'https://atom.io/download/electron',
-    'node_byteorder': '<!(node <(DEPTH)/tools/get-endianness.js)',
+    'node_byteorder': '<!(python <(DEPTH)/tools/get-endianness.py)',
     'node_target_type': 'shared_library',
+    'node_module_version': '',
     'node_install_npm': 'false',
     'node_prefix': '',
     'node_shared': 'true',
-    'node_shared_cares': 'false',
-    'node_shared_http_parser': 'false',
-    'node_shared_libuv': 'false',
-    'node_shared_openssl': 'false',
     'node_shared_v8': 'true',
-    'node_shared_zlib': 'false',
     'node_tag': '',
     'node_use_dtrace': 'false',
     'node_use_etw': 'false',
     'node_use_mdb': 'false',
     'node_use_openssl': 'true',
     'node_use_perfctr': 'false',
-    'node_use_v8_platform': 'false',
+    'node_use_v8_platform': 'true',
     'node_use_bundled_v8': 'false',
+    'node_v8_path': '<(DEPTH)/chromium/v8/',
     'node_enable_d8': 'false',
     'uv_library': 'static_library',
     'uv_parent_path': 'vendor/node/deps/uv',
@@ -49,10 +47,15 @@
     'v8_postmortem_support': 'false',
     'v8_enable_i18n_support': 'false',
     'v8_enable_inspector': '1',
+    'v8_use_snapshot': 'true',
+    'v8_use_external_startup_data': 1,
   },
   # Settings to compile node under Windows.
   'target_defaults': {
     'target_conditions': [
+      ['_target_name in ["icuuc", "icui18n"]', {
+        'cflags_cc!': ['-fno-rtti']
+      }],
       ['_target_name in ["libuv", "http_parser", "openssl", "openssl-cli", "cares", "node_lib", "zlib", "nghttp2"]', {
         'msvs_disabled_warnings': [
           4003,  # not enough actual parameters for macro 'V'
@@ -143,6 +146,14 @@
         ],
       }],
       ['_target_name=="node_lib"', {
+        'cflags!': [
+          '-fvisibility=hidden',
+          '-fdata-sections',
+          '-ffunction-sections',
+        ],
+        'cflags_cc!': [
+          '-fvisibility-inlines-hidden',
+        ],
         'include_dirs': [
           '<(libchromiumcontent_src_dir)',
           '<(libchromiumcontent_src_dir)/third_party/icu/source/common',
@@ -200,9 +211,9 @@
           ['OS=="linux" and libchromiumcontent_component==0', {
             # Prevent the linker from stripping symbols.
             'ldflags': [
-              '-Wl,--whole-archive',
+              '-Wl,--start-group',
               '<@(libchromiumcontent_v8_libraries)',
-              '-Wl,--no-whole-archive',
+              '-Wl,--end-group',
             ],
           }, {
             'libraries': [
@@ -291,7 +302,22 @@
             ],
           }],
         ],
-      }]
+      }],
+      ['_target_name=="shell_runner_host_lib"', {
+        'conditions': [
+          ['icu_use_data_file_flag==1', {
+            'defines': ['ICU_UTIL_DATA_IMPL=ICU_UTIL_DATA_FILE'],
+          }, { # else icu_use_data_file_flag !=1
+            'conditions': [
+              ['OS=="win"', {
+                'defines': ['ICU_UTIL_DATA_IMPL=ICU_UTIL_DATA_SHARED'],
+              }, {
+                'defines': ['ICU_UTIL_DATA_IMPL=ICU_UTIL_DATA_STATIC'],
+              }],
+            ],
+          }],
+        ],
+      }],
     ],
     'msvs_cygwin_shell': 0, # Strangely setting it to 1 would make building under cygwin fail.
     'msvs_disabled_warnings': [
diff --git a/electron.gyp b/electron.gyp
index 261d89428..1ff030ced 100644
--- a/electron.gyp
+++ b/electron.gyp
@@ -233,7 +233,7 @@
                   }, {
                     'copied_libraries': [
                       '<(PRODUCT_DIR)/lib/libnode.so',
-                      '<(libchromiumcontent_dir)/libffmpeg.so',
+                      '<@(libchromiumcontent_shared_v8_libraries)',
                     ],
                   }],
                 ],
@@ -298,8 +298,8 @@
         '<@(lib_sources)',
       ],
       'include_dirs': [
-        '.',
         'chromium_src',
+        '.',
         'native_mate',
         # libicu headers shim.
         '<(SHARED_INTERMEDIATE_DIR)/shim_headers/icui18n_shim',
@@ -308,7 +308,6 @@
         '<(SHARED_INTERMEDIATE_DIR)',
         # Include directories for uv and node.
         'vendor/node/src',
-        'vendor/node/deps/http_parser',
         'vendor/node/deps/uv/include',
         # The `node.h` is using `#include"v8.h"`.
         '<(libchromiumcontent_src_dir)/v8/include',
@@ -431,6 +430,7 @@
             '<@(lib_sources_nss)',
           ],
           'link_settings': {
+            'libraries': [ '<@(libchromiumcontent_v8_libraries)' ],
             'ldflags': [
               # Make binary search for libraries under current directory, so we
               # don't have to manually set $LD_LIBRARY_PATH:
@@ -462,6 +462,9 @@
     {
       'target_name': 'js2asar',
       'type': 'none',
+      'dependencies': [
+        'nodebin'
+      ],
       'actions': [
         {
           'action_name': 'js2asar',
@@ -483,6 +486,7 @@
           'action': [
             'python',
             'tools/js2asar.py',
+            '<(PRODUCT_DIR)/nodebin',
             '<@(_outputs)',
             'lib',
             '<@(_inputs)',
@@ -493,6 +497,9 @@
     {
       'target_name': 'app2asar',
       'type': 'none',
+      'dependencies': [
+        'nodebin'
+      ],
       'actions': [
         {
           'action_name': 'app2asar',
@@ -514,6 +521,7 @@
           'action': [
             'python',
             'tools/js2asar.py',
+            '<(PRODUCT_DIR)/nodebin',
             '<@(_outputs)',
             'default_app',
             '<@(_inputs)',
@@ -539,6 +547,7 @@
       'dependencies': [
         # depend on this target to ensure the '<(js2c_input_dir)' is created
         'atom_js2c_copy',
+        'nodebin'
       ],
       'variables': {
         'sandbox_args': [
@@ -568,11 +577,9 @@
             '<(js2c_input_dir)/preload_bundle.js',
           ],
           'action': [
-            'npm',
-            'run',
-            '--silent',
-            'browserify',
-            '--',
+            'python',
+            'tools/browserify.py',
+            '<(PRODUCT_DIR)/nodebin',
             '<@(sandbox_args)',
             '-o',
             '<@(_outputs)',
@@ -587,12 +594,11 @@
             '<(js2c_input_dir)/isolated_bundle.js',
           ],
           'action': [
-            'npm',
-            'run',
-            '--silent',
-            'browserify',
-            '--',
+            'python',
+            'tools/browserify.py',
+            '<(PRODUCT_DIR)/nodebin',
             '<@(isolated_args)',
+            'lib/isolated_renderer/init.js',
             '-o',
             '<@(_outputs)',
           ],
@@ -628,6 +634,42 @@
         }
       ],
     },  # target atom_js2c
+    {
+      'target_name': 'nodebin',
+      'type': 'executable',
+      'defines': [
+        'ELECTRON_NODE_BUILD_NO_ASAR'
+      ],
+      'sources': [
+        'vendor/node/src/node_main.cc',
+      ],
+      'dependencies': [
+        'vendor/node/node.gyp:node',
+      ],
+      'include_dirs': [
+        '.',
+        '<(node_v8_path)/include',
+        'vendor/native_mate',
+        # Include atom_natives.h.
+        '<(SHARED_INTERMEDIATE_DIR)',
+        # Include directories for uv and node.
+        'vendor/node/src',
+        'vendor/node/deps/uv/include',
+        '<(libchromiumcontent_src_dir)',
+        # The `node.h` is using `#include"v8.h"`.
+        '<(libchromiumcontent_src_dir)/v8/include',
+        # The `node.h` is using `#include"ares.h"`.
+        'vendor/node/deps/cares/include',
+      ],
+      'link_settings': {
+        'libraries': [ '<@(libchromiumcontent_v8_libraries)' ],
+        'ldflags': [
+          '-Wl,-rpath=\$$ORIGIN/',
+          # Make native module dynamic loading work.
+          '-rdynamic',
+        ],
+      },
+    },  # target nodebin
   ],
   'conditions': [
     ['OS=="mac"', {
diff --git a/toolchain.gypi b/toolchain.gypi
index 697add78e..0cbc7f572 100644
--- a/toolchain.gypi
+++ b/toolchain.gypi
@@ -22,7 +22,7 @@
       'arm_neon%': 1,
 
       # Abosulte path to source root.
-      'source_root%': '<!(node <(DEPTH)/tools/atom_source_root.js)',
+      'source_root%': '<!(python <(DEPTH)/tools/atom_source_root.py)',
     },
 
     # Copy conditionally-set variables out one scope.
@@ -46,7 +46,7 @@
         'mac_sdk%': '<!(python <(DEPTH)/tools/mac/find_sdk.py <(mac_sdk_min))',
       }],
 
-      ['OS=="linux"', {
+      ['OS=="linux" and 0', {
         'variables': {
           # The system libdir used for this ABI.
           'system_libdir%': 'lib',
@@ -213,8 +213,7 @@
       },
     }],
 
-    # Setup sysroot environment.
-    ['OS=="linux" and target_arch in ["arm", "ia32", "x64", "arm64", "mips64el"]', {
+    ['0 and OS=="linux" and target_arch in ["arm", "ia32", "x64", "arm64", "mips64el"]', {
       'target_defaults': {
         'target_conditions': [
           ['_toolset=="target"', {
@@ -260,6 +259,35 @@
             'ldflags': [
               '-m64',
             ],
+            'conditions': [
+              ['use_lto==1 and clang==0', {
+                'cflags': [
+                  '-fno-fat-lto-objects',
+                  '-fuse-linker-plugin',
+                  '-flto=4',
+                  '--param=lto-partitions=1',
+                ],
+                'ldflags': [
+                  '-fno-fat-lto-objects',
+                  '-fuse-linker-plugin',
+                  '-flto=4',
+                  '--param=lto-partitions=1',
+                ],
+                'arflags': [
+                  '<!@(python <(DEPTH)/tools/ar-flags.py)',
+                ]
+              }],
+              ['use_lto==1 and clang==1', {
+                'cflags': [
+                  '-flto',
+                  '-fwhole-program-vtables'
+                ],
+                'ldflags': [
+                  '-flto',
+                  '-fwhole-program-vtables'
+                ],
+              }],
+            ],
           }],  # target_arch=="x64" and _toolset=="target"
           ['target_arch=="arm" and _toolset=="target"', {
             'conditions': [
diff --git a/tools/ar-flags.py b/tools/ar-flags.py
new file mode 100644
index 000000000..80b338a6e
--- /dev/null
+++ b/tools/ar-flags.py
@@ -0,0 +1,15 @@
+#!/usr/bin/env python
+
+import os
+import subprocess
+
+if __name__ == '__main__':
+    cc = os.environ.get('CC', '/usr/bin/cc')
+    gcc_version = subprocess.check_output(
+        [cc, '-dumpversion'], universal_newlines=True).strip(' \n')
+
+    lto_plugin = os.path.join(
+        '/usr/libexec/gcc/x86_64-pc-linux-gnu/', gcc_version,
+        'liblto_plugin.so')
+
+    print('--plugin={}'.format(lto_plugin))
diff --git a/tools/atom_source_root.py b/tools/atom_source_root.py
new file mode 100644
index 000000000..316e99701
--- /dev/null
+++ b/tools/atom_source_root.py
@@ -0,0 +1,5 @@
+#!/usr/bin/env python
+
+import os.path
+
+print(os.path.abspath(os.path.dirname(os.path.dirname(__file__))))
diff --git a/tools/browserify.py b/tools/browserify.py
new file mode 100644
index 000000000..15472c953
--- /dev/null
+++ b/tools/browserify.py
@@ -0,0 +1,24 @@
+#!/usr/bin/env python
+
+import os
+import subprocess
+import sys
+
+SOURCE_ROOT = os.path.dirname(os.path.dirname(__file__))
+
+
+def main():
+  node = sys.argv[1]
+  args = sys.argv[2:]
+
+  call_browserify(node, args)
+
+
+def call_browserify(node, args):
+  browserify = os.path.join(
+    SOURCE_ROOT, 'node_modules', '.bin', 'browserify')
+  subprocess.check_call([node, browserify] + args)
+
+
+if __name__ == '__main__':
+  sys.exit(main())
diff --git a/tools/get-endianness.py b/tools/get-endianness.py
new file mode 100644
index 000000000..31507936f
--- /dev/null
+++ b/tools/get-endianness.py
@@ -0,0 +1,4 @@
+#!/usr/bin/env python
+
+import sys
+print(sys.byteorder)
diff --git a/tools/js2asar.py b/tools/js2asar.py
index adad1751e..ca7686893 100755
--- a/tools/js2asar.py
+++ b/tools/js2asar.py
@@ -11,13 +11,14 @@ SOURCE_ROOT = os.path.dirname(os.path.dirname(__file__))
 
 
 def main():
-  archive = sys.argv[1]
-  folder_name = sys.argv[2]
-  source_files = sys.argv[3:]
+  node = sys.argv[1]
+  archive = sys.argv[2]
+  folder_name = sys.argv[3]
+  source_files = sys.argv[4:]
 
   output_dir = tempfile.mkdtemp()
   copy_files(source_files, output_dir)
-  call_asar(archive, os.path.join(output_dir, folder_name))
+  call_asar(node, archive, os.path.join(output_dir, folder_name))
   shutil.rmtree(output_dir)
 
 
@@ -28,11 +29,11 @@ def copy_files(source_files, output_dir):
     shutil.copy2(source_file, output_path)
 
 
-def call_asar(archive, output_dir):
+def call_asar(node, archive, output_dir):
   asar = os.path.join(SOURCE_ROOT, 'node_modules', '.bin', 'asar')
   if sys.platform in ['win32', 'cygwin']:
     asar += '.cmd'
-  subprocess.check_call([asar, 'pack', output_dir, archive])
+  subprocess.check_call([node, asar, 'pack', output_dir, archive])
 
 
 def safe_mkdir(path):
-- 
2.21.0

