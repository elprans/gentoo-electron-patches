From 51831cb7822eb65c5a29121627cbf2c8a840f0df Mon Sep 17 00:00:00 2001
From: Elvis Pranskevichus <elvis@magic.io>
Date: Thu, 12 Dec 2019 16:39:11 -0500
Subject: [PATCH 2/2] Build fixes

---
 build/args/all.gn                             |  1 -
 build/args/release.gn                         |  8 ---
 build/npm.gni                                 |  1 -
 .../disable_color_correct_rendering.patch     |  3 +-
 ...screen_rendering_with_viz_compositor.patch | 62 ++++++++++---------
 ...r_enable_lto_and_build_v8_with_gn_in.patch |  3 +-
 ...edynamicfunction_throw_if_disallowed.patch | 39 ------------
 7 files changed, 36 insertions(+), 81 deletions(-)

diff --git a/build/args/all.gn b/build/args/all.gn
index ad391b658..c0d82b74c 100644
--- a/build/args/all.gn
+++ b/build/args/all.gn
@@ -1,5 +1,4 @@
 is_electron_build = true
-use_jumbo_build = true
 root_extra_deps = [ "//electron" ]
 
 # Registry of NMVs --> https://github.com/nodejs/node/blob/master/doc/abi_version_registry.json
diff --git a/build/args/release.gn b/build/args/release.gn
index e5017f6e1..59207b389 100644
--- a/build/args/release.gn
+++ b/build/args/release.gn
@@ -1,6 +1,4 @@
 import("all.gn")
-is_component_build = false
-is_official_build = true
 
 # This may be guarded behind is_chrome_branded alongside
 # proprietary_codecs https://webrtc-review.googlesource.com/c/src/+/36321,
@@ -8,9 +6,3 @@ is_official_build = true
 # The initialization of the decoder depends on whether ffmpeg has
 # been built with H.264 support.
 rtc_use_h264 = proprietary_codecs
-
-# By default, Electron builds ffmpeg with proprietary codecs enabled. In order
-# to facilitate users who don't want to ship proprietary codecs in ffmpeg, or
-# who have an LGPL requirement to ship ffmpeg as a dynamically linked library,
-# we build ffmpeg as a shared library.
-is_component_ffmpeg = true
diff --git a/build/npm.gni b/build/npm.gni
index a1987d095..fb33a14c3 100644
--- a/build/npm.gni
+++ b/build/npm.gni
@@ -35,7 +35,6 @@ template("npm_action") {
     if (!defined(deps)) {
       deps = []
     }
-    deps += [ ":npm_pre_flight_" + target_name ]
 
     script = "//electron/build/npm-run.py"
     args = [
diff --git a/patches/chromium/disable_color_correct_rendering.patch b/patches/chromium/disable_color_correct_rendering.patch
index b5d36b78e..05a610ac2 100644
--- a/patches/chromium/disable_color_correct_rendering.patch
+++ b/patches/chromium/disable_color_correct_rendering.patch
@@ -269,11 +269,12 @@ diff --git a/third_party/blink/renderer/platform/graphics/canvas_color_params.cc
 index 1aedba288aed698fd1b7ac6a4ef1a67fc892f84a..df2b5b120483225c2bd21a337e6085dbceca4ec4 100644
 --- a/third_party/blink/renderer/platform/graphics/canvas_color_params.cc
 +++ b/third_party/blink/renderer/platform/graphics/canvas_color_params.cc
-@@ -12,6 +12,7 @@
+@@ -12,6 +12,8 @@
  #include "third_party/khronos/GLES3/gl3.h"
  #include "third_party/skia/include/core/SkSurfaceProps.h"
  #include "ui/gfx/color_space.h"
 +#include "ui/gfx/switches.h"
++#include "base/command_line.h"
  
  namespace blink {
  
diff --git a/patches/chromium/feat_offscreen_rendering_with_viz_compositor.patch b/patches/chromium/feat_offscreen_rendering_with_viz_compositor.patch
index 6b5643b4a..e4340c08b 100644
--- a/patches/chromium/feat_offscreen_rendering_with_viz_compositor.patch
+++ b/patches/chromium/feat_offscreen_rendering_with_viz_compositor.patch
@@ -9,9 +9,9 @@ index f5e18df4e06e24d3bdd51308abde48e217444848..41017d9d53b1c0d563ea0901f5cae407
 --- a/components/viz/host/host_display_client.cc
 +++ b/components/viz/host/host_display_client.cc
 @@ -18,6 +18,10 @@
- 
+
  namespace viz {
- 
+
 +void HostDisplayClient::IsOffscreen(IsOffscreenCallback callback) {
 +  std::move(callback).Run(false);
 +}
@@ -22,7 +22,7 @@ index f5e18df4e06e24d3bdd51308abde48e217444848..41017d9d53b1c0d563ea0901f5cae407
 @@ -46,9 +50,9 @@ void HostDisplayClient::OnDisplayReceivedCALayerParams(
  }
  #endif
- 
+
 -#if defined(OS_WIN)
  void HostDisplayClient::CreateLayeredWindowUpdater(
      mojom::LayeredWindowUpdaterRequest request) {
@@ -31,7 +31,7 @@ index f5e18df4e06e24d3bdd51308abde48e217444848..41017d9d53b1c0d563ea0901f5cae407
      DLOG(ERROR) << "HWND shouldn't be using a layered window";
      return;
 @@ -56,8 +60,12 @@ void HostDisplayClient::CreateLayeredWindowUpdater(
- 
+
    layered_window_updater_ =
        std::make_unique<LayeredWindowUpdaterImpl>(widget_, std::move(request));
 -}
@@ -41,7 +41,7 @@ index f5e18df4e06e24d3bdd51308abde48e217444848..41017d9d53b1c0d563ea0901f5cae407
 +                  "Electron's OSR implementation.";
  #endif
 +}
- 
+
  #if defined(USE_X11)
  void HostDisplayClient::DidCompleteSwapWithNewSize(const gfx::Size& size) {
 diff --git a/components/viz/host/host_display_client.h b/components/viz/host/host_display_client.h
@@ -51,7 +51,7 @@ index b8177277ebca471fc147f2d5b53521cbadd8fa2d..72a807e138f80b4ab37cb1d368bc968e
 @@ -30,17 +30,17 @@ class VIZ_HOST_EXPORT HostDisplayClient : public mojom::DisplayClient {
    mojom::DisplayClientPtr GetBoundPtr(
        scoped_refptr<base::SingleThreadTaskRunner> task_runner);
- 
+
 - private:
 + protected:
    // mojom::DisplayClient implementation:
@@ -59,14 +59,14 @@ index b8177277ebca471fc147f2d5b53521cbadd8fa2d..72a807e138f80b4ab37cb1d368bc968e
    void OnDisplayReceivedCALayerParams(
        const gfx::CALayerParams& ca_layer_params) override;
  #endif
- 
+
 -#if defined(OS_WIN)
 +  void IsOffscreen(IsOffscreenCallback callback) override;
 +
    void CreateLayeredWindowUpdater(
        mojom::LayeredWindowUpdaterRequest request) override;
 -#endif
- 
+
  #if defined(USE_X11)
    void DidCompleteSwapWithNewSize(const gfx::Size& size) override;
 diff --git a/components/viz/host/layered_window_updater_impl.cc b/components/viz/host/layered_window_updater_impl.cc
@@ -76,13 +76,13 @@ index 65c26e2f7ae813e50f6740f73a4d145467da4366..39c04c4d6b644a4ad7b13b4e932b085f
 @@ -43,7 +43,9 @@ void LayeredWindowUpdaterImpl::OnAllocatedSharedMemory(
    // |region|'s handle will close when it goes out of scope.
  }
- 
+
 -void LayeredWindowUpdaterImpl::Draw(DrawCallback draw_callback) {
 +void LayeredWindowUpdaterImpl::Draw(
 +    const gfx::Rect& damage_rect,
 +    DrawCallback draw_callback) {
    TRACE_EVENT0("viz", "LayeredWindowUpdaterImpl::Draw");
- 
+
    if (!canvas_) {
 diff --git a/components/viz/host/layered_window_updater_impl.h b/components/viz/host/layered_window_updater_impl.h
 index ced30727ab67e557265c3a61f7c213763da973ce..f422786fe6cd9cab47494fe6028f3c3be8bc763e 100644
@@ -94,7 +94,7 @@ index ced30727ab67e557265c3a61f7c213763da973ce..f422786fe6cd9cab47494fe6028f3c3b
                                 base::UnsafeSharedMemoryRegion region) override;
 -  void Draw(DrawCallback draw_callback) override;
 +  void Draw(const gfx::Rect& damage_rect, DrawCallback draw_callback) override;
- 
+
   private:
    const HWND hwnd_;
 diff --git a/components/viz/service/BUILD.gn b/components/viz/service/BUILD.gn
@@ -133,7 +133,7 @@ index e3c8e9dbca69f2665e8dbbd798d45c3b7199e04c..d9fa2d536e977ac966065a9058661f88
 @@ -223,6 +225,19 @@ OutputSurfaceProviderImpl::CreateSoftwareOutputDeviceForPlatform(
    if (headless_)
      return std::make_unique<SoftwareOutputDevice>();
- 
+
 +#if !defined(OS_MACOSX)
 +  DCHECK(display_client);
 +  bool offscreen = false;
@@ -155,7 +155,7 @@ index b9357082293cc55650144ccbc8bada8fe6d1cac4..b4cb07e26d1504719f80e5835c1cb5f1
 --- a/components/viz/service/display_embedder/software_output_device_mac.cc
 +++ b/components/viz/service/display_embedder/software_output_device_mac.cc
 @@ -102,6 +102,8 @@ void SoftwareOutputDeviceMac::UpdateAndCopyBufferDamage(
- 
+
  SkCanvas* SoftwareOutputDeviceMac::BeginPaint(
      const gfx::Rect& new_damage_rect) {
 +  last_damage = new_damage_rect;
@@ -178,11 +178,11 @@ index f3867356e3d641416e00e6d115ae9ae2a0be90ab..b1d192d2b20ccb63fba07093101d745e
 @@ -56,6 +56,7 @@ class VIZ_SERVICE_EXPORT SoftwareOutputDeviceMac : public SoftwareOutputDevice {
    void UpdateAndCopyBufferDamage(Buffer* previous_paint_buffer,
                                   const SkRegion& new_damage_rect);
- 
+
 +  gfx::Rect last_damage;
    gfx::Size pixel_size_;
    float scale_factor_ = 1;
- 
+
 diff --git a/components/viz/service/display_embedder/software_output_device_proxy.cc b/components/viz/service/display_embedder/software_output_device_proxy.cc
 new file mode 100644
 index 0000000000000000000000000000000000000000..c17b03e00089bfd301c63910426bb16afb8cdae7
@@ -350,7 +350,7 @@ new file mode 100644
 index 0000000000000000000000000000000000000000..3865939d0445a23a468770f57207ba5ef23277ed
 --- /dev/null
 +++ b/components/viz/service/display_embedder/software_output_device_proxy.h
-@@ -0,0 +1,88 @@
+@@ -0,0 +1,90 @@
 +// Copyright 2014 The Chromium Authors. All rights reserved.
 +// Use of this source code is governed by a BSD-style license that can be
 +// found in the LICENSE file.
@@ -364,6 +364,8 @@ index 0000000000000000000000000000000000000000..3865939d0445a23a468770f57207ba5e
 +
 +#include <memory>
 +
++#include "base/memory/shared_memory_mapping.h"
++#include "base/threading/thread_checker.h"
 +#include "components/viz/host/host_display_client.h"
 +#include "components/viz/service/display/software_output_device.h"
 +#include "components/viz/service/viz_service_export.h"
@@ -454,7 +456,7 @@ index 74316edc0e0bd28b1772e9d7cf34327d113462c4..9cbe5400458ce6e0b8ea9edfa3f0969f
 @@ -265,7 +266,7 @@ void SoftwareOutputDeviceWinProxy::EndPaintDelegated(
    if (!canvas_)
      return;
- 
+
 -  layered_window_updater_->Draw(base::BindOnce(
 +  layered_window_updater_->Draw(damage_rect, base::BindOnce(
        &SoftwareOutputDeviceWinProxy::DrawAck, base::Unretained(this)));
@@ -463,7 +465,7 @@ index 74316edc0e0bd28b1772e9d7cf34327d113462c4..9cbe5400458ce6e0b8ea9edfa3f0969f
 @@ -297,8 +298,13 @@ std::unique_ptr<SoftwareOutputDevice> CreateSoftwareOutputDeviceWin(
      display_client->CreateLayeredWindowUpdater(
          mojo::MakeRequest(&layered_window_updater));
- 
+
 -    return std::make_unique<SoftwareOutputDeviceWinProxy>(
 -        hwnd, std::move(layered_window_updater));
 +    bool offscreen = false;
@@ -482,19 +484,19 @@ index 5c6292cfb3b8b46802c772d202d19c78e4782488..ed27af3ab0b383553b4d9492d29cec2b
 +++ b/services/viz/privileged/mojom/compositing/display_private.mojom
 @@ -79,12 +79,14 @@ interface DisplayPrivate {
  };
- 
+
  interface DisplayClient {
 +  [Sync]
 +  IsOffscreen() => (bool success);
 +
    [EnableIf=is_mac]
    OnDisplayReceivedCALayerParams(gfx.mojom.CALayerParams ca_layer_params);
- 
+
    // Creates a LayeredWindowUpdater implementation to draw into a layered
    // window.
 -  [EnableIf=is_win]
    CreateLayeredWindowUpdater(LayeredWindowUpdater& layered_window_updater);
- 
+
    // Notifies that a swap has occurred and provides information about the pixel
 diff --git a/services/viz/privileged/mojom/compositing/layered_window_updater.mojom b/services/viz/privileged/mojom/compositing/layered_window_updater.mojom
 index 6b7fbb6cf13dc8ee6ade0878a9a2c1efc5d4d3f1..e2af75168cb914a7b3b4a6c9b6a285498c3f8e72 100644
@@ -522,7 +524,7 @@ index ff4562c024be6bc6eb2b975b3a13c6139b89f88e..22ed4f873266143310bf5ef55df3df2a
 @@ -194,6 +195,15 @@ class COMPOSITOR_EXPORT ContextFactory {
    virtual bool SyncTokensRequiredForDisplayCompositor() = 0;
  };
- 
+
 +class COMPOSITOR_EXPORT CompositorDelegate {
 + public:
 +  virtual std::unique_ptr<viz::HostDisplayClient> CreateHostDisplayClient(
@@ -538,7 +540,7 @@ index ff4562c024be6bc6eb2b975b3a13c6139b89f88e..22ed4f873266143310bf5ef55df3df2a
 @@ -233,6 +243,9 @@ class COMPOSITOR_EXPORT Compositor : public cc::LayerTreeHostClient,
    // Schedules a redraw of the layer tree associated with this compositor.
    void ScheduleDraw();
- 
+
 +  CompositorDelegate* delegate() const { return delegate_; }
 +  void SetDelegate(CompositorDelegate* delegate) { delegate_ = delegate; }
 +
@@ -548,12 +550,12 @@ index ff4562c024be6bc6eb2b975b3a13c6139b89f88e..22ed4f873266143310bf5ef55df3df2a
 @@ -450,6 +463,8 @@ class COMPOSITOR_EXPORT Compositor : public cc::LayerTreeHostClient,
    ui::ContextFactory* context_factory_;
    ui::ContextFactoryPrivate* context_factory_private_;
- 
+
 +  CompositorDelegate* delegate_ = nullptr;
 +
    // The root of the Layer tree drawn by this compositor.
    Layer* root_layer_ = nullptr;
- 
+
 diff --git a/ui/compositor/host/host_context_factory_private.cc b/ui/compositor/host/host_context_factory_private.cc
 index d32c154b965bf9fa90f8ebb2a8dd395302efc57d..f63efc91890af45c5a767bfb892ef252b22c253e 100644
 --- a/ui/compositor/host/host_context_factory_private.cc
@@ -579,16 +581,16 @@ index 4014e64a75da88cf66c02e8adb71171c2666cab7..25e57784e1a1ffc546b003daa4cd0059
 +++ b/ui/gfx/ca_layer_params.h
 @@ -6,6 +6,7 @@
  #define UI_GFX_CA_LAYER_PARAMS_H_
- 
+
  #include "build/build_config.h"
 +#include "ui/gfx/geometry/rect.h"
  #include "ui/gfx/geometry/size.h"
  #include "ui/gfx/gfx_export.h"
- 
+
 @@ -41,6 +42,8 @@ struct GFX_EXPORT CALayerParams {
    gfx::ScopedRefCountedIOSurfaceMachPort io_surface_mach_port;
  #endif
- 
+
 +  gfx::Rect damage;
 +
    // The geometry of the frame.
@@ -612,7 +614,7 @@ index 843d5c24ec33de07c12d4417eb111f91dbcd42fe..0ea594950fcd2686f1b07248dbc8ceb2
 @@ -52,6 +52,9 @@ bool StructTraits<gfx::mojom::CALayerParamsDataView, gfx::CALayerParams>::Read(
    if (!data.ReadPixelSize(&out->pixel_size))
      return false;
- 
+
 +  if (!data.ReadDamage(&out->damage))
 +    return false;
 +
@@ -626,7 +628,7 @@ index 4cac766eae3161baedac4202f694129cd90c80de..0821495ad22944d8856bb750cac8912a
 @@ -20,6 +20,10 @@ struct StructTraits<gfx::mojom::CALayerParamsDataView, gfx::CALayerParams> {
      return ca_layer_params.pixel_size;
    }
- 
+
 +  static gfx::Rect damage(const gfx::CALayerParams& ca_layer_params) {
 +    return ca_layer_params.damage;
 +  }
diff --git a/patches/node/fix_add_default_values_for_enable_lto_and_build_v8_with_gn_in.patch b/patches/node/fix_add_default_values_for_enable_lto_and_build_v8_with_gn_in.patch
index fe018e7ad..b94f3543d 100644
--- a/patches/node/fix_add_default_values_for_enable_lto_and_build_v8_with_gn_in.patch
+++ b/patches/node/fix_add_default_values_for_enable_lto_and_build_v8_with_gn_in.patch
@@ -11,7 +11,7 @@ diff --git a/common.gypi b/common.gypi
 index b86e5e05d7df9ad472f16735448a53f433620eef..f07e65f719a1a5939997dfcae7bc787ee6391f4d 100644
 --- a/common.gypi
 +++ b/common.gypi
-@@ -77,6 +77,22 @@
+@@ -77,6 +77,23 @@
  
      ##### end V8 defaults #####
  
@@ -30,6 +30,7 @@ index b86e5e05d7df9ad472f16735448a53f433620eef..f07e65f719a1a5939997dfcae7bc787e
 +    # these values being accurate.
 +    'build_v8_with_gn': 'false',
 +    'enable_lto%': 'false',
++    'openssl_fips': '',
 +
      'conditions': [
        ['target_arch=="arm64"', {
diff --git a/patches/v8/make_createdynamicfunction_throw_if_disallowed.patch b/patches/v8/make_createdynamicfunction_throw_if_disallowed.patch
index bafd0b04a..949cb2d6d 100644
--- a/patches/v8/make_createdynamicfunction_throw_if_disallowed.patch
+++ b/patches/v8/make_createdynamicfunction_throw_if_disallowed.patch
@@ -25,42 +25,3 @@ index f75014d034626643ae83dc8f167a473b7291522c..b5c2e8b25f10f2fff9011a0a1bd1aeef
    }
  
    // Build the source string.
-diff --git a/test/mjsunit/mjsunit.status b/test/mjsunit/mjsunit.status
-index 134a49f7480c87acbb08133a2d6a4d028bbdd090..7dcaa412199770d7c4f688d7f8a66d887130bf82 100644
---- a/test/mjsunit/mjsunit.status
-+++ b/test/mjsunit/mjsunit.status
-@@ -232,6 +232,9 @@
-   # BUG(v8:6306).
-   'wasm/huge-memory': [SKIP],
- 
-+  # Needs to be adapted after changes to Function constructor. chromium:1065094
-+  'cross-realm-filtering': [SKIP],
-+
-   # Allocates a huge string and then flattens it, very slow in debug mode.
-   'regress/regress-752764': [PASS, ['mode == debug', SLOW]],
- 
-diff --git a/test/mjsunit/regress-1065094.js b/test/mjsunit/regress-1065094.js
-new file mode 100644
-index 0000000000000000000000000000000000000000..365e20285bb0505dec3f84c4df57db0525e7acc3
---- /dev/null
-+++ b/test/mjsunit/regress-1065094.js
-@@ -0,0 +1,19 @@
-+// Copyright 2020 the V8 project authors. All rights reserved.
-+// Use of this source code is governed by a BSD-style license that can be
-+// found in the LICENSE file.
-+
-+// Flags: --allow-natives-syntax
-+
-+function f(fnConstructor) {
-+    return Object.is(new fnConstructor(), undefined);
-+}
-+
-+const realmIndex = Realm.createAllowCrossRealmAccess();
-+const otherFunction = Realm.global(realmIndex).Function;
-+Realm.detachGlobal(realmIndex);
-+
-+%PrepareFunctionForOptimization(f);
-+assertFalse(f(Function));
-+assertThrows(_ => f(otherFunction));
-+%OptimizeFunctionOnNextCall(f);
-+assertThrows(_ => f(otherFunction));
-- 
2.26.2

