From 84024082fc3a2efb0f3250d835ab86ce56d66970 Mon Sep 17 00:00:00 2001
From: Elvis Pranskevichus <elvis@magic.io>
Date: Thu, 12 Dec 2019 16:39:11 -0500
Subject: [PATCH] Build fixes

---
 build/args/release.gn                         |   8 -
 build/npm.gni                                 |   1 -
 ...tindexinparent_returns_base_optional.patch |  23 -
 ..._into_an_editable_combobox_s_listbox.patch |  78 ---
 patches/chromium/backport_1042986.patch       |  27 --
 ...dit-cmds-to-sent-focused-WebContents.patch |  40 --
 ...hostimpl_detach_for_speculative_rfhs.patch |  78 ---
 .../chromium/notification_provenance.patch    |  24 -
 patches/node/.patches                         |   1 -
 ...r_enable_lto_and_build_v8_with_gn_in.patch |   3 +-
 .../fix_remove_unused_llhttp_variables.patch  |  48 --
 patches/v8/backport_1084820.patch             | 146 ------
 patches/v8/backport_986051.patch              | 113 -----
 patches/v8/cherry-pick-146bd99e762b.patch     | 227 ---------
 patches/v8/cherry-pick-815b12dfb5ec.patch     | 455 ------------------
 ...ons_whose_module_is_not_fully_loaded.patch |  53 --
 16 files changed, 2 insertions(+), 1323 deletions(-)
 delete mode 100644 patches/node/fix_remove_unused_llhttp_variables.patch

diff --git a/build/args/release.gn b/build/args/release.gn
index e5017f6e1..59207b389 100644
--- a/build/args/release.gn
+++ b/build/args/release.gn
@@ -1,6 +1,4 @@
 import("all.gn")
-is_component_build = false
-is_official_build = true
 
 # This may be guarded behind is_chrome_branded alongside
 # proprietary_codecs https://webrtc-review.googlesource.com/c/src/+/36321,
@@ -8,9 +6,3 @@ is_official_build = true
 # The initialization of the decoder depends on whether ffmpeg has
 # been built with H.264 support.
 rtc_use_h264 = proprietary_codecs
-
-# By default, Electron builds ffmpeg with proprietary codecs enabled. In order
-# to facilitate users who don't want to ship proprietary codecs in ffmpeg, or
-# who have an LGPL requirement to ship ffmpeg as a dynamically linked library,
-# we build ffmpeg as a shared library.
-is_component_ffmpeg = true
diff --git a/build/npm.gni b/build/npm.gni
index 1d1c94425..64a360952 100644
--- a/build/npm.gni
+++ b/build/npm.gni
@@ -33,7 +33,6 @@ template("npm_action") {
     if (!defined(deps)) {
       deps = []
     }
-    deps += [ ":npm_pre_flight_" + target_name ]
 
     script = "//electron/build/npm-run.py"
     args = [
diff --git a/patches/chromium/a11y_axplatformnodebase_getindexinparent_returns_base_optional.patch b/patches/chromium/a11y_axplatformnodebase_getindexinparent_returns_base_optional.patch
index 5a35a5c0e..dfa406141 100644
--- a/patches/chromium/a11y_axplatformnodebase_getindexinparent_returns_base_optional.patch
+++ b/patches/chromium/a11y_axplatformnodebase_getindexinparent_returns_base_optional.patch
@@ -36,29 +36,6 @@ Reviewed-by: Martin Robinson <mrobinson@igalia.com>
 Reviewed-by: Joanmarie Diggs <jdiggs@igalia.com>
 Cr-Commit-Position: refs/heads/master@{#757381}
 
-diff --git a/content/test/data/accessibility/event/css-flex-text-update-expected-auralinux.txt b/content/test/data/accessibility/event/css-flex-text-update-expected-auralinux.txt
-index c68cfe98572b9b2edf3658053be3dea2040524e4..483d5bb7eb7be40fa0dbd81cb336fe41fe665efe 100644
---- a/content/test/data/accessibility/event/css-flex-text-update-expected-auralinux.txt
-+++ b/content/test/data/accessibility/event/css-flex-text-update-expected-auralinux.txt
-@@ -1,3 +1,3 @@
--CHILDREN-CHANGED index:0 CHILD:(role=ROLE_STATIC) role=ROLE_STATIC ENABLED,SENSITIVE,SHOWING,VISIBLE
-+CHILDREN-CHANGED index:-1 CHILD:(role=ROLE_STATIC) role=ROLE_STATIC ENABLED,SENSITIVE,SHOWING,VISIBLE
- NAME-CHANGED:new role=ROLE_STATIC name='new' ENABLED,SENSITIVE,SHOWING,VISIBLE
- STATE-CHANGE:DEFUNCT:TRUE role=ROLE_INVALID name='(null)' DEFUNCT
-diff --git a/content/test/data/accessibility/event/text-changed-expected-auralinux.txt b/content/test/data/accessibility/event/text-changed-expected-auralinux.txt
-index b1573d5a3e84bc168403ad989632333473a5c0a8..0fe6700c90e82846aa862cc09a567d5ad36bccc6 100644
---- a/content/test/data/accessibility/event/text-changed-expected-auralinux.txt
-+++ b/content/test/data/accessibility/event/text-changed-expected-auralinux.txt
-@@ -1,7 +1,7 @@
-+CHILDREN-CHANGED index:-1 CHILD:(role=ROLE_STATIC) role=ROLE_STATIC ENABLED,SENSITIVE,SHOWING,VISIBLE
-+CHILDREN-CHANGED index:-1 CHILD:(role=ROLE_STATIC) role=ROLE_STATIC ENABLED,SENSITIVE,SHOWING,VISIBLE
- CHILDREN-CHANGED index:0 CHILD:(role=ROLE_STATIC) role=ROLE_PARAGRAPH ENABLED,SENSITIVE,SHOWING,VISIBLE
- CHILDREN-CHANGED index:0 CHILD:(role=ROLE_STATIC) role=ROLE_PARAGRAPH ENABLED,SENSITIVE,SHOWING,VISIBLE
--CHILDREN-CHANGED index:0 CHILD:(role=ROLE_STATIC) role=ROLE_STATIC ENABLED,SENSITIVE,SHOWING,VISIBLE
--CHILDREN-CHANGED index:0 CHILD:(role=ROLE_STATIC) role=ROLE_STATIC ENABLED,SENSITIVE,SHOWING,VISIBLE
- NAME-CHANGED:Modified Div role=ROLE_STATIC name='Modified Div' ENABLED,SENSITIVE,SHOWING,VISIBLE
- NAME-CHANGED:Modified Heading role=ROLE_STATIC name='Modified Heading' ENABLED,SENSITIVE,SHOWING,VISIBLE
- STATE-CHANGE:DEFUNCT:TRUE role=ROLE_INVALID name='(null)' DEFUNCT
 diff --git a/ui/accessibility/platform/ax_platform_node_auralinux.cc b/ui/accessibility/platform/ax_platform_node_auralinux.cc
 index 2f150dbbae32f9faae0f8b55a65133fb333aa5e5..f3e9ab6b2bb8ab0c4a688fe84861fe9d7e766a5a 100644
 --- a/ui/accessibility/platform/ax_platform_node_auralinux.cc
diff --git a/patches/chromium/allow_focus_to_move_into_an_editable_combobox_s_listbox.patch b/patches/chromium/allow_focus_to_move_into_an_editable_combobox_s_listbox.patch
index d0af6721b..058f22ac0 100644
--- a/patches/chromium/allow_focus_to_move_into_an_editable_combobox_s_listbox.patch
+++ b/patches/chromium/allow_focus_to_move_into_an_editable_combobox_s_listbox.patch
@@ -35,81 +35,3 @@ index 33324bbca5953f6f2f9d829e4c7b5d7daa3f49ea..a27cacfd303706ef3ee637107d2de0c8
    // Otherwise, follow the active descendant.
    return GetActiveDescendant(focus);
  }
-diff --git a/content/test/data/accessibility/aria/aria-combobox-expected-mac.txt b/content/test/data/accessibility/aria/aria-combobox-expected-mac.txt
-index d28f2235dedeedab23bf23db0475087c3d3ec73e..9dd9803232490edb95c80abcb2f084b8c42ceb7e 100644
---- a/content/test/data/accessibility/aria/aria-combobox-expected-mac.txt
-+++ b/content/test/data/accessibility/aria/aria-combobox-expected-mac.txt
-@@ -1,7 +1,7 @@
- AXWebArea
- ++AXGroup
- ++++AXStaticText AXValue='State'
--++AXComboBox AXTitle='State' AXAutocompleteValue='list' AXFocused='1'
-+++AXComboBox AXTitle='State' AXAutocompleteValue='list'
- ++AXList
- ++++AXStaticText AXValue='Alabama'
--++++AXStaticText AXValue='Alaska'
-\ No newline at end of file
-+++++AXStaticText AXFocused='1' AXValue='Alaska'
-diff --git a/content/test/data/accessibility/event/aria-combo-box-collapse-expected-mac.txt b/content/test/data/accessibility/event/aria-combo-box-collapse-expected-mac.txt
-index 97c3c417f30812abecdde273f130088df86bd4ae..93ef79e311977bb4277842fa5332f6097faba837 100644
---- a/content/test/data/accessibility/event/aria-combo-box-collapse-expected-mac.txt
-+++ b/content/test/data/accessibility/event/aria-combo-box-collapse-expected-mac.txt
-@@ -1,2 +1,3 @@
- AXExpandedChanged on AXComboBox
--AXSelectedChildrenChanged on AXComboBox
-+AXFocusedUIElementChanged on AXComboBox
-+AXSelectedChildrenChanged on AXComboBox
-\ No newline at end of file
-diff --git a/content/test/data/accessibility/event/aria-combo-box-delay-add-list-expected-mac.txt b/content/test/data/accessibility/event/aria-combo-box-delay-add-list-expected-mac.txt
-index 47ff72a2689baa23600ededfe38d79fd6b5bedcf..f7d4c30f49fe3f3f62132cddf59942181b8127b8 100644
---- a/content/test/data/accessibility/event/aria-combo-box-delay-add-list-expected-mac.txt
-+++ b/content/test/data/accessibility/event/aria-combo-box-delay-add-list-expected-mac.txt
-@@ -1 +1,2 @@
--AXSelectedChildrenChanged on AXComboBox
-+AXFocusedUIElementChanged on AXStaticText AXValue="Apple"
-+AXSelectedChildrenChanged on AXComboBox
-\ No newline at end of file
-diff --git a/content/test/data/accessibility/event/aria-combo-box-delay-show-list-expected-mac.txt b/content/test/data/accessibility/event/aria-combo-box-delay-show-list-expected-mac.txt
-index 47ff72a2689baa23600ededfe38d79fd6b5bedcf..ab757bb0687ff49affcc67076eddd52e18b0eacc 100644
---- a/content/test/data/accessibility/event/aria-combo-box-delay-show-list-expected-mac.txt
-+++ b/content/test/data/accessibility/event/aria-combo-box-delay-show-list-expected-mac.txt
-@@ -1 +1,2 @@
-+AXFocusedUIElementChanged on AXStaticText AXValue="Apple"
- AXSelectedChildrenChanged on AXComboBox
-diff --git a/content/test/data/accessibility/event/aria-combo-box-expand-expected-mac.txt b/content/test/data/accessibility/event/aria-combo-box-expand-expected-mac.txt
-index 97cdb8b8b67d46e0a952d22765c823bd346aef3a..343feae3d79a48981cc1e27015ba2a93423eedc0 100644
---- a/content/test/data/accessibility/event/aria-combo-box-expand-expected-mac.txt
-+++ b/content/test/data/accessibility/event/aria-combo-box-expand-expected-mac.txt
-@@ -1,3 +1,4 @@
- AXExpandedChanged on AXComboBox
-+AXFocusedUIElementChanged on AXStaticText AXValue="Apple"
- AXSelectedChildrenChanged on AXComboBox
--AXSelectedChildrenChanged on AXList
-+AXSelectedChildrenChanged on AXList
-\ No newline at end of file
-diff --git a/content/test/data/accessibility/event/aria-combo-box-focus-expected-mac.txt b/content/test/data/accessibility/event/aria-combo-box-focus-expected-mac.txt
-index 2bfc70f5fecea2c2a5e7268cef641d6d0e7d4a47..ad5e2bf2c8029185c51eecc94cac1dbe7608c99e 100644
---- a/content/test/data/accessibility/event/aria-combo-box-focus-expected-mac.txt
-+++ b/content/test/data/accessibility/event/aria-combo-box-focus-expected-mac.txt
-@@ -1,3 +1,3 @@
--AXFocusedUIElementChanged on AXComboBox
--AXSelectedTextChanged on AXComboBox
--AXSelectedTextChanged on AXWebArea
-+AXFocusedUIElementChanged on AXStaticText AXValue="Apple not selected"
-+AXSelectedTextChanged on AXStaticText AXValue="Apple not selected"
-+AXSelectedTextChanged on AXWebArea
-\ No newline at end of file
-diff --git a/content/test/data/accessibility/event/aria-combo-box-next-expected-mac.txt b/content/test/data/accessibility/event/aria-combo-box-next-expected-mac.txt
-index d5f21183c3d0a1c24cb6665194a93c3299dbfd56..9e7d0c0aaeb1c52dc1f1b3afed36f287851b89ff 100644
---- a/content/test/data/accessibility/event/aria-combo-box-next-expected-mac.txt
-+++ b/content/test/data/accessibility/event/aria-combo-box-next-expected-mac.txt
-@@ -1,5 +1,7 @@
-+AXFocusedUIElementChanged on AXStaticText AXValue="Orange"
- AXSelectedChildrenChanged on AXComboBox
- AXSelectedChildrenChanged on AXList
- === Start Continuation ===
-+AXFocusedUIElementChanged on AXStaticText AXValue="Banana"
- AXSelectedChildrenChanged on AXComboBox
--AXSelectedChildrenChanged on AXList
-+AXSelectedChildrenChanged on AXList
-\ No newline at end of file
diff --git a/patches/chromium/backport_1042986.patch b/patches/chromium/backport_1042986.patch
index 414e0402b..bec833550 100644
--- a/patches/chromium/backport_1042986.patch
+++ b/patches/chromium/backport_1042986.patch
@@ -159,33 +159,6 @@ index 0a8a18d178ded19600c33ca086d1c79fe30fa717..daffcb50bd9588e7b03d12cd245b6f8a
  }
  
  // Regression test for https://crbug.com/996044
-diff --git a/content/test/data/scrollable_page_with_content.html b/content/test/data/scrollable_page_with_content.html
-index c37d095d22231d12faa19985e8e98b3f9368fab1..1ef150d3a4289caef3a883c92feb79216f77f457 100644
---- a/content/test/data/scrollable_page_with_content.html
-+++ b/content/test/data/scrollable_page_with_content.html
-@@ -1,6 +1,12 @@
- <html>
-   <head>
-     <meta name="viewport" content="width=device-width, minimum-scale=1.0">
-+    <script>
-+      let did_scroll = false;
-+      window.addEventListener('scroll', () => {
-+        did_scroll = true;
-+      });
-+    </script>
-     <style>
-       p {
-         position: absolute;
-diff --git a/content/test/data/target_text_link.html b/content/test/data/target_text_link.html
-index 00f40bf042aed3476f07a9cc0575159c52cba9f2..ade7e42029f40b213c9110dd88ac270edb8d26f3 100644
---- a/content/test/data/target_text_link.html
-+++ b/content/test/data/target_text_link.html
-@@ -5,4 +5,4 @@
-   <body>
-     <a id="link" href="/scrollable_page_with_content.html#:~:text=text">link</a>
-   </body>
--</html>>
-+</html>
 diff --git a/third_party/blink/renderer/core/loader/document_loader.h b/third_party/blink/renderer/core/loader/document_loader.h
 index 31fc5754a02318ab5eb7b239cea1530baf80ecba..cbf0e87fd81e48f77dac052a7f5992cf0dbaa2e0 100644
 --- a/third_party/blink/renderer/core/loader/document_loader.h
diff --git a/patches/chromium/fix-ensure-edit-cmds-to-sent-focused-WebContents.patch b/patches/chromium/fix-ensure-edit-cmds-to-sent-focused-WebContents.patch
index 7914ffd68..54e85cfcf 100644
--- a/patches/chromium/fix-ensure-edit-cmds-to-sent-focused-WebContents.patch
+++ b/patches/chromium/fix-ensure-edit-cmds-to-sent-focused-WebContents.patch
@@ -174,43 +174,3 @@ index 158e0507af7433e16c47227e7519b12e14554f1b..e7b8109cdc78e76d737bd0c067f8d33e
    void SelectAll() override {}
  };
  
-diff --git a/content/test/mock_render_widget_host_delegate.cc b/content/test/mock_render_widget_host_delegate.cc
-index 8e7922a2e83b1272e93fbd7c8c5323ad7ed9c3a7..4aa08a55c036569e39d4d02254b347d8470462af 100644
---- a/content/test/mock_render_widget_host_delegate.cc
-+++ b/content/test/mock_render_widget_host_delegate.cc
-@@ -31,12 +31,18 @@ void MockRenderWidgetHostDelegate::ExecuteEditCommand(
-     const std::string& command,
-     const base::Optional<base::string16>& value) {}
- 
-+void MockRenderWidgetHostDelegate::Undo() {}
-+
-+void MockRenderWidgetHostDelegate::Redo() {}
-+
- void MockRenderWidgetHostDelegate::Cut() {}
- 
- void MockRenderWidgetHostDelegate::Copy() {}
- 
- void MockRenderWidgetHostDelegate::Paste() {}
- 
-+void MockRenderWidgetHostDelegate::PasteAndMatchStyle() {}
-+
- void MockRenderWidgetHostDelegate::SelectAll() {}
- 
- void MockRenderWidgetHostDelegate::CreateInputEventRouter() {
-diff --git a/content/test/mock_render_widget_host_delegate.h b/content/test/mock_render_widget_host_delegate.h
-index 5cdc010273f0bd03419c14046ee6cb8603a29dbf..16273c2ec761668249277a0be77aa429bcba1aef 100644
---- a/content/test/mock_render_widget_host_delegate.h
-+++ b/content/test/mock_render_widget_host_delegate.h
-@@ -42,9 +42,12 @@ class MockRenderWidgetHostDelegate : public RenderWidgetHostDelegate {
-       const NativeWebKeyboardEvent& event) override;
-   void ExecuteEditCommand(const std::string& command,
-                           const base::Optional<base::string16>& value) override;
-+  void Undo() override;
-+  void Redo() override;
-   void Cut() override;
-   void Copy() override;
-   void Paste() override;
-+  void PasteAndMatchStyle() override;
-   void SelectAll() override;
-   RenderWidgetHostInputEventRouter* GetInputEventRouter() override;
-   RenderWidgetHostImpl* GetFocusedRenderWidgetHost(
diff --git a/patches/chromium/ignore_renderframehostimpl_detach_for_speculative_rfhs.patch b/patches/chromium/ignore_renderframehostimpl_detach_for_speculative_rfhs.patch
index b128bc8eb..020475180 100644
--- a/patches/chromium/ignore_renderframehostimpl_detach_for_speculative_rfhs.patch
+++ b/patches/chromium/ignore_renderframehostimpl_detach_for_speculative_rfhs.patch
@@ -82,81 +82,3 @@ index 1e8f9b19e4bdeb0b6a371e384e30e10b7986137e..7770582317986869ff38658e2abfd4ba
  #if defined(OS_ANDROID)
  
  namespace {
-diff --git a/content/public/test/browser_test_utils.cc b/content/public/test/browser_test_utils.cc
-index d7f88a819505305d690e35b3b78862c1b9fd8f5e..9b2f0bb265293549b84d37279ba1e2e7c314a737 100644
---- a/content/public/test/browser_test_utils.cc
-+++ b/content/public/test/browser_test_utils.cc
-@@ -624,15 +624,21 @@ bool NavigateToURL(WebContents* web_contents,
- bool NavigateIframeToURL(WebContents* web_contents,
-                          const std::string& iframe_id,
-                          const GURL& url) {
-+  TestNavigationObserver load_observer(web_contents);
-+  bool result = BeginNavigateIframeToURL(web_contents, iframe_id, url);
-+  load_observer.Wait();
-+  return result;
-+}
-+
-+bool BeginNavigateIframeToURL(WebContents* web_contents,
-+                              const std::string& iframe_id,
-+                              const GURL& url) {
-   std::string script = base::StringPrintf(
-       "setTimeout(\""
-       "var iframes = document.getElementById('%s');iframes.src='%s';"
-       "\",0)",
-       iframe_id.c_str(), url.spec().c_str());
--  TestNavigationObserver load_observer(web_contents);
--  bool result = ExecuteScript(web_contents, script);
--  load_observer.Wait();
--  return result;
-+  return ExecuteScript(web_contents, script);
- }
- 
- void NavigateToURLBlockUntilNavigationsComplete(WebContents* web_contents,
-diff --git a/content/public/test/browser_test_utils.h b/content/public/test/browser_test_utils.h
-index 8c2e904462c655c9a587e5243572e60b8327ad1c..d4b16a127f92559469f386b734ffa1e6d20eb51e 100644
---- a/content/public/test/browser_test_utils.h
-+++ b/content/public/test/browser_test_utils.h
-@@ -137,6 +137,12 @@ bool NavigateIframeToURL(WebContents* web_contents,
-                          const std::string& iframe_id,
-                          const GURL& url);
- 
-+// Similar to |NavigateIframeToURL()| but returns as soon as the navigation is
-+// initiated.
-+bool BeginNavigateIframeToURL(WebContents* web_contents,
-+                              const std::string& iframe_id,
-+                              const GURL& url);
-+
- // Generate a URL for a file path including a query string.
- GURL GetFileUrlWithQuery(const base::FilePath& path,
-                          const std::string& query_string);
-diff --git a/content/test/data/cross_site_iframe_factory.html b/content/test/data/cross_site_iframe_factory.html
-index 959f45a6be7f233082e364f90d6875d125ae6fe6..e4807d1ad3f7526d7b21843ba8f49e50f7ed8d7e 100644
---- a/content/test/data/cross_site_iframe_factory.html
-+++ b/content/test/data/cross_site_iframe_factory.html
-@@ -10,12 +10,12 @@ Example usage in a browsertest, explained:
- When you navigate to the above URL, the outer document (on a.com) will create a
- single iframe:
- 
--  <iframe src="http://b.com:1234/cross_site_iframe_factory.html?b(c(),d())">
-+  <iframe id="child-0" src="http://b.com:1234/cross_site_iframe_factory.html?b(c(),d())">
- 
- Inside of which, then, are created the two leaf iframes:
- 
--  <iframe src="http://c.com:1234/cross_site_iframe_factory.html?c()">
--  <iframe src="http://d.com:1234/cross_site_iframe_factory.html?d()">
-+  <iframe id="child-0" src="http://c.com:1234/cross_site_iframe_factory.html?c()">
-+  <iframe id="child-1" src="http://d.com:1234/cross_site_iframe_factory.html?d()">
- 
- Add iframe options by enclosing them in '{' and '}' characters after the
- hostname (multiple options can be separated with commas):
-@@ -24,8 +24,8 @@ hostname (multiple options can be separated with commas):
- 
- Will create two iframes:
- 
--  <iframe src="http://a.com:1234/cross_site_iframe_factory.html?b()" allowfullscreen>
--  <iframe src="http://c.com:1234/cross_site_iframe_factory.html?c{sandbox-allow-scripts}(d())" sandbox="allow-scripts">
-+  <iframe id="child-0" src="http://a.com:1234/cross_site_iframe_factory.html?b()" allowfullscreen>
-+  <iframe id="child-1" src="http://c.com:1234/cross_site_iframe_factory.html?c{sandbox-allow-scripts}(d())" sandbox="allow-scripts">
- 
- To specify the site for each iframe, you can use a simple identifier like "a"
- or "b", and ".com" will be automatically appended. You can also specify a port
diff --git a/patches/chromium/notification_provenance.patch b/patches/chromium/notification_provenance.patch
index 0287b8b55..767a3db35 100644
--- a/patches/chromium/notification_provenance.patch
+++ b/patches/chromium/notification_provenance.patch
@@ -141,27 +141,3 @@ index ca61088079c4150fcf389504ddcf26bcf6bf69cd..d9c034c39890eef1fe3d95c6d7c0ae68
        const std::string& notification_id,
        const GURL& origin,
        const blink::PlatformNotificationData& notification_data,
-diff --git a/content/test/mock_platform_notification_service.cc b/content/test/mock_platform_notification_service.cc
-index 73a1af201b12bf818af2eafadad478b8c422826c..fc7e74c0bf900d475fc134a7b606c5f9e404f934 100644
---- a/content/test/mock_platform_notification_service.cc
-+++ b/content/test/mock_platform_notification_service.cc
-@@ -31,6 +31,7 @@ MockPlatformNotificationService::MockPlatformNotificationService(
- MockPlatformNotificationService::~MockPlatformNotificationService() = default;
- 
- void MockPlatformNotificationService::DisplayNotification(
-+    RenderProcessHost* render_process_host,
-     const std::string& notification_id,
-     const GURL& origin,
-     const blink::PlatformNotificationData& notification_data,
-diff --git a/content/test/mock_platform_notification_service.h b/content/test/mock_platform_notification_service.h
-index 6d108f9884f7e8f608b70ec33d286a06346e7456..4650a01c2d090c5957eb7a7e21f124489513142a 100644
---- a/content/test/mock_platform_notification_service.h
-+++ b/content/test/mock_platform_notification_service.h
-@@ -47,6 +47,7 @@ class MockPlatformNotificationService : public PlatformNotificationService {
- 
-   // PlatformNotificationService implementation.
-   void DisplayNotification(
-+      RenderProcessHost* render_process_host,
-       const std::string& notification_id,
-       const GURL& origin,
-       const blink::PlatformNotificationData& notification_data,
diff --git a/patches/node/.patches b/patches/node/.patches
index 38f8497a1..096d186ae 100644
--- a/patches/node/.patches
+++ b/patches/node/.patches
@@ -27,7 +27,6 @@ build_bring_back_node_with_ltcg_configuration.patch
 revert_crypto_add_oaeplabel_option.patch
 refactor_transferrablemodule_is_deprecated_use_compiledwasmmodule.patch
 enable_31_bit_smis_on_64bit_arch_and_ptr_compression.patch
-fix_remove_unused_llhttp_variables.patch
 fix_include_libuv_header_in_node_binding.patch
 remove_deprecated_task_api_override_removed_in_latest_v8.patch
 remove_serialization_deserialization_of_wasmmoduleobject.patch
diff --git a/patches/node/fix_add_default_values_for_enable_lto_and_build_v8_with_gn_in.patch b/patches/node/fix_add_default_values_for_enable_lto_and_build_v8_with_gn_in.patch
index fe018e7ad..b94f3543d 100644
--- a/patches/node/fix_add_default_values_for_enable_lto_and_build_v8_with_gn_in.patch
+++ b/patches/node/fix_add_default_values_for_enable_lto_and_build_v8_with_gn_in.patch
@@ -11,7 +11,7 @@ diff --git a/common.gypi b/common.gypi
 index b86e5e05d7df9ad472f16735448a53f433620eef..f07e65f719a1a5939997dfcae7bc787ee6391f4d 100644
 --- a/common.gypi
 +++ b/common.gypi
-@@ -77,6 +77,22 @@
+@@ -77,6 +77,23 @@
  
      ##### end V8 defaults #####
  
@@ -30,6 +30,7 @@ index b86e5e05d7df9ad472f16735448a53f433620eef..f07e65f719a1a5939997dfcae7bc787e
 +    # these values being accurate.
 +    'build_v8_with_gn': 'false',
 +    'enable_lto%': 'false',
++    'openssl_fips': '',
 +
      'conditions': [
        ['target_arch=="arm64"', {
diff --git a/patches/node/fix_remove_unused_llhttp_variables.patch b/patches/node/fix_remove_unused_llhttp_variables.patch
deleted file mode 100644
index 1f57b27fb..000000000
--- a/patches/node/fix_remove_unused_llhttp_variables.patch
+++ /dev/null
@@ -1,48 +0,0 @@
-From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
-From: Shelley Vohr <shelley.vohr@gmail.com>
-Date: Wed, 8 Jan 2020 10:12:46 -0800
-Subject: fix: remove unused llhttp variables
-
-Node.js updated llhttps in https://github.com/nodejs/node/pull/30553,
-which updated some of the llparse_blobs. To keep numbering consistency,
-it left the newly unused ones, which causes compilation failures in Electron
-as we do not allow unused variables.
-
-Fixed in https://github.com/nodejs/llparse/pull/34; this patch can be removed
-as soon as llparse v6.2.1 is rolled into Node.js
-
-diff --git a/deps/llhttp/src/llhttp.c b/deps/llhttp/src/llhttp.c
-index 698230f93fe08f347a9e6e9f7194663c9b5318c3..664b563ad1ccf69794f0e86245e91d0bc26c1d58 100644
---- a/deps/llhttp/src/llhttp.c
-+++ b/deps/llhttp/src/llhttp.c
-@@ -24,10 +24,6 @@ typedef int (*llhttp__internal__span_cb)(
- static const unsigned char llparse_blob0[] = {
-   'C', 'L'
- };
--static const unsigned char ALIGN(16) llparse_blob1[] = {
--  0x9, 0x9, 0xc, 0xc, '!', '"', '$', '>', '@', '~', 0x80,
--  0xff
--};
- static const unsigned char llparse_blob2[] = {
-   'o', 'n'
- };
-@@ -43,19 +39,9 @@ static const unsigned char llparse_blob5[] = {
- static const unsigned char llparse_blob6[] = {
-   'p', 'g', 'r', 'a', 'd', 'e'
- };
--static const unsigned char ALIGN(16) llparse_blob7[] = {
--  0x9, 0x9, ' ', '~', 0x80, 0xfe
--};
- static const unsigned char llparse_blob8[] = {
-   'h', 'u', 'n', 'k', 'e', 'd'
- };
--static const unsigned char ALIGN(16) llparse_blob9[] = {
--  ' ', '!', '#', '\'', '*', '+', '-', '.', '0', '9', 'A',
--  'Z', '^', 'z', '|', '|'
--};
--static const unsigned char ALIGN(16) llparse_blob10[] = {
--  '~', '~'
--};
- static const unsigned char llparse_blob11[] = {
-   'e', 'n', 't', '-', 'l', 'e', 'n', 'g', 't', 'h'
- };
diff --git a/patches/v8/backport_1084820.patch b/patches/v8/backport_1084820.patch
index 46cbfa56c..a9c0d9f16 100644
--- a/patches/v8/backport_1084820.patch
+++ b/patches/v8/backport_1084820.patch
@@ -622,149 +622,3 @@ index 2766ed7c6381a279d6161c058ea33fffe9860426..6c68ea1f96f00df51008a14d3ca7c7e6
    intptr_t frame_content_[1];
  
    intptr_t* GetFrameSlotPointer(unsigned offset) {
-diff --git a/test/mjsunit/compiler/regress-1084820.js b/test/mjsunit/compiler/regress-1084820.js
-new file mode 100644
-index 0000000000000000000000000000000000000000..beb168b413ff045c5aff8e68d2e6da32b27800d6
---- /dev/null
-+++ b/test/mjsunit/compiler/regress-1084820.js
-@@ -0,0 +1,27 @@
-+// Copyright 2020 the V8 project authors. All rights reserved.
-+// Use of this source code is governed by a BSD-style license that can be
-+// found in the LICENSE file.
-+
-+// Flags: --allow-natives-syntax
-+
-+// Create a map where 'my_property' has HeapObject representation.
-+const dummy_obj = {};
-+dummy_obj.my_property = 'some HeapObject';
-+dummy_obj.my_property = 'some other HeapObject';
-+
-+function gaga() {
-+  const obj = {};
-+  // Store a HeapNumber and then a Smi.
-+  // This must happen in a loop, even if it's only 2 iterations:
-+  for (let j = -3_000_000_000; j <= -1_000_000_000; j += 2_000_000_000) {
-+    obj.my_property = j;
-+  }
-+  // Trigger (soft) deopt.
-+  if (!%IsBeingInterpreted()) obj + obj;
-+}
-+
-+%PrepareFunctionForOptimization(gaga);
-+gaga();
-+gaga();
-+%OptimizeFunctionOnNextCall(gaga);
-+gaga();
-diff --git a/test/mjsunit/compiler/regress-1092650.js b/test/mjsunit/compiler/regress-1092650.js
-new file mode 100644
-index 0000000000000000000000000000000000000000..ba94375aeb8262536e28d5d409d69115e385c3b3
---- /dev/null
-+++ b/test/mjsunit/compiler/regress-1092650.js
-@@ -0,0 +1,23 @@
-+// Copyright 2020 the V8 project authors. All rights reserved.
-+// Use of this source code is governed by a BSD-style license that can be
-+// found in the LICENSE file.
-+
-+// Flags: --allow-natives-syntax
-+
-+// Create map with HeapNumber in field 'a'
-+({a: 2**30});
-+
-+function foo() {
-+  return foo.arguments[0];
-+}
-+
-+function main() {
-+  foo({a: 42});
-+}
-+
-+%PrepareFunctionForOptimization(foo);
-+%PrepareFunctionForOptimization(main);
-+main();
-+main();
-+%OptimizeFunctionOnNextCall(main);
-+main();
-diff --git a/test/mjsunit/compiler/regress-1094132.js b/test/mjsunit/compiler/regress-1094132.js
-new file mode 100644
-index 0000000000000000000000000000000000000000..418637d86f8c363b9c0c41c450914e758ff73e9c
---- /dev/null
-+++ b/test/mjsunit/compiler/regress-1094132.js
-@@ -0,0 +1,78 @@
-+// Copyright 2020 the V8 project authors. All rights reserved.
-+// Use of this source code is governed by a BSD-style license that can be
-+// found in the LICENSE file.
-+
-+// Flags: --allow-natives-syntax
-+
-+function prettyPrinted() {}
-+
-+function formatFailureText() {
-+  if (expectedText.length <= 40 && foundText.length <= 40) {
-+    message += ": expected <" + expectedText + "> found <" + foundText + ">";
-+    message += ":\nexpected:\n" + expectedText + "\nfound:\n" + foundText;
-+  }
-+}
-+
-+function fail(expectedText, found, name_opt) {
-+  formatFailureText(expectedText, found, name_opt);
-+  if (!a[aProps[i]][aProps[i]]) { }
-+}
-+
-+function deepEquals(a, b) {
-+  if (a === 0) return 1 / a === 1 / b;
-+  if (typeof a !== typeof a) return false;
-+  if (typeof a !== "object" && typeof a !== "function") return false;
-+  if (objectClass !== classOf()) return false;
-+  if (objectClass === "RegExp") { }
-+}
-+
-+function assertEquals() {
-+  if (!deepEquals()) {
-+    fail(prettyPrinted(), undefined, undefined);
-+  }
-+}
-+
-+({y: {}, x: 0.42});
-+
-+function gaga() {
-+  return {gx: bar.arguments[0], hx: baz.arguments[0]};
-+}
-+
-+function baz() {
-+  return gaga();
-+}
-+
-+function bar(obj) {
-+  return baz(obj.y);
-+}
-+
-+function foo() {
-+  bar({y: {}, x: 42});
-+  try { assertEquals() } catch (e) {}
-+  try { assertEquals() } catch (e) {}
-+  assertEquals();
-+}
-+
-+%PrepareFunctionForOptimization(prettyPrinted);
-+%PrepareFunctionForOptimization(formatFailureText);
-+%PrepareFunctionForOptimization(fail);
-+%PrepareFunctionForOptimization(deepEquals);
-+%PrepareFunctionForOptimization(assertEquals);
-+%PrepareFunctionForOptimization(gaga);
-+%PrepareFunctionForOptimization(baz);
-+%PrepareFunctionForOptimization(bar);
-+%PrepareFunctionForOptimization(foo);
-+try { foo() } catch (e) {}
-+%OptimizeFunctionOnNextCall(foo);
-+try { foo() } catch (e) {}
-+%PrepareFunctionForOptimization(prettyPrinted);
-+%PrepareFunctionForOptimization(formatFailureText);
-+%PrepareFunctionForOptimization(fail);
-+%PrepareFunctionForOptimization(deepEquals);
-+%PrepareFunctionForOptimization(assertEquals);
-+%PrepareFunctionForOptimization(gaga);
-+%PrepareFunctionForOptimization(baz);
-+%PrepareFunctionForOptimization(bar);
-+%PrepareFunctionForOptimization(foo);
-+%OptimizeFunctionOnNextCall(foo);
-+try { foo() } catch (e) {}
diff --git a/patches/v8/backport_986051.patch b/patches/v8/backport_986051.patch
index fda3028c5..5fdfa3589 100644
--- a/patches/v8/backport_986051.patch
+++ b/patches/v8/backport_986051.patch
@@ -103,116 +103,3 @@ index 4d38c51a2a28d6871ab00b21bde0dfb2c0605357..5875164595f78992d50c23fe90884269
  
      DISALLOW_COPY_AND_ASSIGN(CommandLineAPIScope);
    };
-diff --git a/test/inspector/runtime/regress-986051-expected.txt b/test/inspector/runtime/regress-986051-expected.txt
-new file mode 100644
-index 0000000000000000000000000000000000000000..ad2f3d8209532a03acf39974faca6c36adf4b78c
---- /dev/null
-+++ b/test/inspector/runtime/regress-986051-expected.txt
-@@ -0,0 +1,76 @@
-+Regression test for 986051
-+Regression test
-+{
-+    id : <messageId>
-+    result : {
-+        result : {
-+            description : 1
-+            type : number
-+            value : 1
-+        }
-+    }
-+}
-+{
-+    id : <messageId>
-+    result : {
-+        exceptionDetails : {
-+            columnNumber : 1
-+            exception : {
-+                className : ReferenceError
-+                description : ReferenceError: $0 is not defined     at <anonymous>:1:1
-+                objectId : <objectId>
-+                subtype : error
-+                type : object
-+            }
-+            exceptionId : <exceptionId>
-+            lineNumber : 1
-+            scriptId : <scriptId>
-+            stackTrace : {
-+                callFrames : [
-+                    [0] : {
-+                        columnNumber : 0
-+                        functionName : 
-+                        lineNumber : 0
-+                        scriptId : <scriptId>
-+                        url : 
-+                    }
-+                ]
-+            }
-+            text : Uncaught
-+        }
-+        result : {
-+            className : ReferenceError
-+            description : ReferenceError: $0 is not defined     at <anonymous>:1:1
-+            objectId : <objectId>
-+            subtype : error
-+            type : object
-+        }
-+    }
-+}
-+{
-+    id : <messageId>
-+    result : {
-+        result : {
-+            className : global
-+            description : global
-+            objectId : <objectId>
-+            type : object
-+        }
-+    }
-+}
-+{
-+    id : <messageId>
-+    result : {
-+        result : {
-+            type : undefined
-+        }
-+    }
-+}
-+{
-+    id : <messageId>
-+    result : {
-+        result : {
-+            type : undefined
-+        }
-+    }
-+}
-diff --git a/test/inspector/runtime/regress-986051.js b/test/inspector/runtime/regress-986051.js
-new file mode 100644
-index 0000000000000000000000000000000000000000..7c6842a36cf23185178ec99d97a488e88ca30910
---- /dev/null
-+++ b/test/inspector/runtime/regress-986051.js
-@@ -0,0 +1,25 @@
-+// Copyright 2020 the V8 project authors. All rights reserved.
-+// Use of this source code is governed by a BSD-style license that can be
-+// found in the LICENSE file.
-+
-+let {Protocol} = InspectorTest.start(
-+  "Regression test for 986051");
-+
-+Protocol.Runtime.enable();
-+(async function() {
-+  InspectorTest.log("Regression test");
-+  evaluateRepl('1', true);
-+  evaluateRepl('$0', false);
-+  evaluateRepl('Object.defineProperty(globalThis, "$0", {configurable: false});', true);
-+  evaluateRepl('$0', true);
-+  evaluateRepl('$0', false);
-+  InspectorTest.completeTest();
-+})();
-+
-+async function evaluateRepl(expression, includeCommandLineAPI) {
-+  InspectorTest.logMessage(await Protocol.Runtime.evaluate({
-+    expression,
-+    includeCommandLineAPI,
-+    replMode: true,
-+  }));
-+}
diff --git a/patches/v8/cherry-pick-146bd99e762b.patch b/patches/v8/cherry-pick-146bd99e762b.patch
index e5dbf970c..d45ac851e 100644
--- a/patches/v8/cherry-pick-146bd99e762b.patch
+++ b/patches/v8/cherry-pick-146bd99e762b.patch
@@ -65,230 +65,3 @@ index 2dc288628c8ea69d425e3b86e63e151157b9f925..1799cff1a2284c9b0d7cdaec99d0c310
    set_is_deprecated(true);
    if (FLAG_trace_maps) {
      LOG(isolate, MapEvent("Deprecate", handle(*this, isolate), Handle<Map>()));
-diff --git a/test/cctest/test-field-type-tracking.cc b/test/cctest/test-field-type-tracking.cc
-index 840478a5203847f331f792eae7125a60396f896a..7abbcbde350a08bbb7d364c15184bc896607848b 100644
---- a/test/cctest/test-field-type-tracking.cc
-+++ b/test/cctest/test-field-type-tracking.cc
-@@ -1019,7 +1019,8 @@ namespace {
- // where "p2A" and "p2B" differ only in the attributes.
- //
- void TestReconfigureDataFieldAttribute_GeneralizeField(
--    const CRFTData& from, const CRFTData& to, const CRFTData& expected) {
-+    const CRFTData& from, const CRFTData& to, const CRFTData& expected,
-+    bool expected_deprecation) {
-   Isolate* isolate = CcTest::i_isolate();
- 
-   Expectations expectations(isolate);
-@@ -1079,22 +1080,26 @@ void TestReconfigureDataFieldAttribute_GeneralizeField(
-   CHECK_NE(*map2, *new_map);
-   CHECK(expectations2.Check(*map2));
- 
--  // |map| should be deprecated and |new_map| should match new expectations.
-   for (int i = kSplitProp; i < kPropCount; i++) {
-     expectations.SetDataField(i, expected.constness, expected.representation,
-                               expected.type);
-   }
--  CHECK(map->is_deprecated());
--  CHECK(!code->marked_for_deoptimization());
--  CHECK_NE(*map, *new_map);
-+  if (expected_deprecation) {
-+    CHECK(map->is_deprecated());
-+    CHECK(!code->marked_for_deoptimization());
-+    CHECK_NE(*map, *new_map);
- 
--  CHECK(!new_map->is_deprecated());
--  CHECK(expectations.Check(*new_map));
-+    CHECK(!new_map->is_deprecated());
-+    CHECK(expectations.Check(*new_map));
- 
--  // Update deprecated |map|, it should become |new_map|.
--  Handle<Map> updated_map = Map::Update(isolate, map);
--  CHECK_EQ(*new_map, *updated_map);
--  CheckMigrationTarget(isolate, *map, *updated_map);
-+    // Update deprecated |map|, it should become |new_map|.
-+    Handle<Map> updated_map = Map::Update(isolate, map);
-+    CHECK_EQ(*new_map, *updated_map);
-+    CheckMigrationTarget(isolate, *map, *updated_map);
-+  } else {
-+    CHECK(!map->is_deprecated());
-+    CHECK(expectations.Check(*map));
-+  }
- }
- 
- // This test ensures that trivial field generalization (from HeapObject to
-@@ -1200,22 +1205,22 @@ TEST(ReconfigureDataFieldAttribute_GeneralizeSmiFieldToDouble) {
-   TestReconfigureDataFieldAttribute_GeneralizeField(
-       {PropertyConstness::kConst, Representation::Smi(), any_type},
-       {PropertyConstness::kConst, Representation::Double(), any_type},
--      {PropertyConstness::kConst, Representation::Double(), any_type});
-+      {PropertyConstness::kConst, Representation::Double(), any_type}, true);
- 
-   TestReconfigureDataFieldAttribute_GeneralizeField(
-       {PropertyConstness::kConst, Representation::Smi(), any_type},
-       {PropertyConstness::kMutable, Representation::Double(), any_type},
--      {PropertyConstness::kMutable, Representation::Double(), any_type});
-+      {PropertyConstness::kMutable, Representation::Double(), any_type}, true);
- 
-   TestReconfigureDataFieldAttribute_GeneralizeField(
-       {PropertyConstness::kMutable, Representation::Smi(), any_type},
-       {PropertyConstness::kConst, Representation::Double(), any_type},
--      {PropertyConstness::kMutable, Representation::Double(), any_type});
-+      {PropertyConstness::kMutable, Representation::Double(), any_type}, true);
- 
-   TestReconfigureDataFieldAttribute_GeneralizeField(
-       {PropertyConstness::kMutable, Representation::Smi(), any_type},
-       {PropertyConstness::kMutable, Representation::Double(), any_type},
--      {PropertyConstness::kMutable, Representation::Double(), any_type});
-+      {PropertyConstness::kMutable, Representation::Double(), any_type}, true);
- }
- 
- TEST(ReconfigureDataFieldAttribute_GeneralizeSmiFieldToTagged) {
-@@ -1230,22 +1235,26 @@ TEST(ReconfigureDataFieldAttribute_GeneralizeSmiFieldToTagged) {
-   TestReconfigureDataFieldAttribute_GeneralizeField(
-       {PropertyConstness::kConst, Representation::Smi(), any_type},
-       {PropertyConstness::kConst, Representation::HeapObject(), value_type},
--      {PropertyConstness::kConst, Representation::Tagged(), any_type});
-+      {PropertyConstness::kConst, Representation::Tagged(), any_type},
-+      !FLAG_modify_field_representation_inplace);
- 
-   TestReconfigureDataFieldAttribute_GeneralizeField(
-       {PropertyConstness::kConst, Representation::Smi(), any_type},
-       {PropertyConstness::kMutable, Representation::HeapObject(), value_type},
--      {PropertyConstness::kMutable, Representation::Tagged(), any_type});
-+      {PropertyConstness::kMutable, Representation::Tagged(), any_type},
-+      !FLAG_modify_field_representation_inplace);
- 
-   TestReconfigureDataFieldAttribute_GeneralizeField(
-       {PropertyConstness::kMutable, Representation::Smi(), any_type},
-       {PropertyConstness::kConst, Representation::HeapObject(), value_type},
--      {PropertyConstness::kMutable, Representation::Tagged(), any_type});
-+      {PropertyConstness::kMutable, Representation::Tagged(), any_type},
-+      !FLAG_modify_field_representation_inplace);
- 
-   TestReconfigureDataFieldAttribute_GeneralizeField(
-       {PropertyConstness::kMutable, Representation::Smi(), any_type},
-       {PropertyConstness::kMutable, Representation::HeapObject(), value_type},
--      {PropertyConstness::kMutable, Representation::Tagged(), any_type});
-+      {PropertyConstness::kMutable, Representation::Tagged(), any_type},
-+      !FLAG_modify_field_representation_inplace);
- }
- 
- TEST(ReconfigureDataFieldAttribute_GeneralizeDoubleFieldToTagged) {
-@@ -1260,22 +1269,26 @@ TEST(ReconfigureDataFieldAttribute_GeneralizeDoubleFieldToTagged) {
-   TestReconfigureDataFieldAttribute_GeneralizeField(
-       {PropertyConstness::kConst, Representation::Double(), any_type},
-       {PropertyConstness::kConst, Representation::HeapObject(), value_type},
--      {PropertyConstness::kConst, Representation::Tagged(), any_type});
-+      {PropertyConstness::kConst, Representation::Tagged(), any_type},
-+      FLAG_unbox_double_fields || !FLAG_modify_field_representation_inplace);
- 
-   TestReconfigureDataFieldAttribute_GeneralizeField(
-       {PropertyConstness::kConst, Representation::Double(), any_type},
-       {PropertyConstness::kMutable, Representation::HeapObject(), value_type},
--      {PropertyConstness::kMutable, Representation::Tagged(), any_type});
-+      {PropertyConstness::kMutable, Representation::Tagged(), any_type},
-+      FLAG_unbox_double_fields || !FLAG_modify_field_representation_inplace);
- 
-   TestReconfigureDataFieldAttribute_GeneralizeField(
-       {PropertyConstness::kMutable, Representation::Double(), any_type},
-       {PropertyConstness::kConst, Representation::HeapObject(), value_type},
--      {PropertyConstness::kMutable, Representation::Tagged(), any_type});
-+      {PropertyConstness::kMutable, Representation::Tagged(), any_type},
-+      FLAG_unbox_double_fields || !FLAG_modify_field_representation_inplace);
- 
-   TestReconfigureDataFieldAttribute_GeneralizeField(
-       {PropertyConstness::kMutable, Representation::Double(), any_type},
-       {PropertyConstness::kMutable, Representation::HeapObject(), value_type},
--      {PropertyConstness::kMutable, Representation::Tagged(), any_type});
-+      {PropertyConstness::kMutable, Representation::Tagged(), any_type},
-+      FLAG_unbox_double_fields || !FLAG_modify_field_representation_inplace);
- }
- 
- TEST(ReconfigureDataFieldAttribute_GeneralizeHeapObjFieldToHeapObj) {
-@@ -1361,7 +1374,8 @@ TEST(ReconfigureDataFieldAttribute_GeneralizeHeapObjectFieldToTagged) {
-   TestReconfigureDataFieldAttribute_GeneralizeField(
-       {PropertyConstness::kMutable, Representation::HeapObject(), value_type},
-       {PropertyConstness::kMutable, Representation::Smi(), any_type},
--      {PropertyConstness::kMutable, Representation::Tagged(), any_type});
-+      {PropertyConstness::kMutable, Representation::Tagged(), any_type},
-+      !FLAG_modify_field_representation_inplace);
- }
- 
- 
-diff --git a/test/mjsunit/regress/regress-1143772.js b/test/mjsunit/regress/regress-1143772.js
-new file mode 100644
-index 0000000000000000000000000000000000000000..40bc494d458afec816fd72e3fbb36b20a7942649
---- /dev/null
-+++ b/test/mjsunit/regress/regress-1143772.js
-@@ -0,0 +1,71 @@
-+// Copyright 2020 the V8 project authors. All rights reserved.
-+// Use of this source code is governed by a BSD-style license that can be
-+// found in the LICENSE file.
-+//
-+// Flags: --allow-natives-syntax
-+
-+(function() {
-+    // Only run this test if doubles are transitioned in-place to tagged.
-+    let x = {};
-+    x.a = 0.1;
-+    let y = {};
-+    y.a = {};
-+    if (!%HaveSameMap(x, y)) return;
-+
-+    // m1: {}
-+    let m1 = {};
-+
-+    // m2: {a:d}
-+    let m2 = {};
-+    assertTrue(%HaveSameMap(m2, m1));
-+    m2.a = 13.37;
-+
-+    // m3: {a:d, b:s}
-+    let m3 = {};
-+    m3.a = 13.37;
-+    assertTrue(%HaveSameMap(m3, m2));
-+    m3.b = 1;
-+
-+    // m4: {a:d, b:s, c:h}
-+    let m4 = {};
-+    m4.a = 13.37;
-+    m4.b = 1;
-+    assertTrue(%HaveSameMap(m4, m3));
-+    m4.c = {};
-+
-+    // m4_2 == m4
-+    let m4_2 = {};
-+    m4_2.a = 13.37;
-+    m4_2.b = 1;
-+    m4_2.c = {};
-+    assertTrue(%HaveSameMap(m4_2, m4));
-+
-+    // m5: {a:d, b:d}
-+    let m5 = {};
-+    m5.a = 13.37;
-+    assertTrue(%HaveSameMap(m5, m2));
-+    m5.b = 13.37;
-+    assertFalse(%HaveSameMap(m5, m3));
-+
-+    // At this point, Map3 and Map4 are both deprecated. Map2 transitions to
-+    // Map5. Map5 is the migration target for Map3.
-+    assertFalse(%HaveSameMap(m5, m3));
-+
-+    // m6: {a:d, b:d, c:d}
-+    let m6 = {};
-+    m6.a = 13.37;
-+    assertTrue(%HaveSameMap(m6, m2));
-+    m6.b = 13.37;
-+    assertTrue(%HaveSameMap(m6, m5));
-+    m6.c = 13.37
-+
-+    // Make m7: {a:d, b:d, c:t}
-+    let m7 = m4_2;
-+    assertTrue(%HaveSameMap(m7, m4));
-+    // Map4 is deprecated, so this property access triggers a Map migration.
-+    // With in-place map updates and no double unboxing, this should end up
-+    // migrating to Map6, and updating it in-place.
-+    m7.c;
-+    assertFalse(%HaveSameMap(m7, m4));
-+    assertTrue(%HaveSameMap(m6, m7));
-+})();
diff --git a/patches/v8/cherry-pick-815b12dfb5ec.patch b/patches/v8/cherry-pick-815b12dfb5ec.patch
index 9c1588dc1..e2093a04e 100644
--- a/patches/v8/cherry-pick-815b12dfb5ec.patch
+++ b/patches/v8/cherry-pick-815b12dfb5ec.patch
@@ -361,458 +361,3 @@ index 5a7db13e516cf9be9314cf99f274145d21090f64..055bf41c9144197288bd7d9eb0275adb
  
    // Search a non-property transition (like elements kind, observe or frozen
    // transitions).
-diff --git a/test/cctest/BUILD.gn b/test/cctest/BUILD.gn
-index 89fe36f65b681d420a6d9b4d964ca0bc60c7a0be..983ec3c8c31cbb2374503c047bf9f41e44eeda8c 100644
---- a/test/cctest/BUILD.gn
-+++ b/test/cctest/BUILD.gn
-@@ -194,6 +194,7 @@ v8_source_set("cctest_sources") {
-     "test-debug.cc",
-     "test-decls.cc",
-     "test-deoptimization.cc",
-+    "test-descriptor-array.cc",
-     "test-dictionary.cc",
-     "test-diy-fp.cc",
-     "test-double.cc",
-diff --git a/test/cctest/test-descriptor-array.cc b/test/cctest/test-descriptor-array.cc
-new file mode 100644
-index 0000000000000000000000000000000000000000..7abd36ec6c84959c3da59b8e78d9e4a0ee291632
---- /dev/null
-+++ b/test/cctest/test-descriptor-array.cc
-@@ -0,0 +1,424 @@
-+// Copyright 2020 the V8 project authors. All rights reserved.
-+// Use of this source code is governed by a BSD-style license that can be
-+// found in the LICENSE file.
-+
-+#include "src/base/logging.h"
-+#include "src/codegen/code-stub-assembler.h"
-+#include "src/common/globals.h"
-+#include "src/objects/descriptor-array.h"
-+#include "src/objects/property-details.h"
-+#include "src/objects/string-inl.h"
-+#include "src/objects/transitions-inl.h"
-+#include "test/cctest/cctest.h"
-+#include "test/cctest/compiler/code-assembler-tester.h"
-+#include "test/cctest/compiler/function-tester.h"
-+#include "test/cctest/test-transitions.h"
-+
-+namespace v8 {
-+namespace internal {
-+
-+namespace {
-+
-+using Label = compiler::CodeAssemblerLabel;
-+template <class T>
-+using TVariable = compiler::TypedCodeAssemblerVariable<T>;
-+
-+Handle<Name> NewNameWithHash(Isolate* isolate, const char* str, uint32_t hash,
-+                             bool is_integer) {
-+  uint32_t hash_field = hash << Name::kHashShift;
-+
-+  static_assert(Name::kNofHashBitFields == 2, "This test needs updating");
-+  static_assert(Name::kHashNotComputedMask == 1, "This test needs updating");
-+  static_assert(Name::kIsNotIntegerIndexMask == 2, "This test needs updating");
-+
-+  if (!is_integer) {
-+    hash_field |= Name::kIsNotIntegerIndexMask;
-+  }
-+  Handle<Name> name = isolate->factory()->NewOneByteInternalizedString(
-+      OneByteVector(str), hash_field);
-+  name->set_hash_field(hash_field);
-+  CHECK(name->IsUniqueName());
-+  return name;
-+}
-+
-+template <typename... Args>
-+MaybeHandle<Object> Call(Isolate* isolate, Handle<JSFunction> function,
-+                         Args... args) {
-+  const int nof_args = sizeof...(Args);
-+  Handle<Object> call_args[] = {args...};
-+  Handle<Object> receiver = isolate->factory()->undefined_value();
-+  return Execution::Call(isolate, function, receiver, nof_args, call_args);
-+}
-+
-+void CheckDescriptorArrayLookups(Isolate* isolate, Handle<Map> map,
-+                                 std::vector<Handle<Name>>& names,
-+                                 Handle<JSFunction> csa_lookup) {
-+  // Test C++ implementation.
-+  {
-+    DisallowHeapAllocation no_gc;
-+    DescriptorArray descriptors = map->instance_descriptors();
-+    DCHECK(descriptors.IsSortedNoDuplicates());
-+    int nof_descriptors = descriptors.number_of_descriptors();
-+
-+    for (size_t i = 0; i < names.size(); ++i) {
-+      Name name = *names[i];
-+      InternalIndex index = descriptors.Search(name, nof_descriptors, false);
-+      CHECK(index.is_found());
-+      CHECK_EQ(i, index.as_uint32());
-+    }
-+  }
-+
-+  // Test CSA implementation.
-+  if (!FLAG_jitless) {
-+    for (size_t i = 0; i < names.size(); ++i) {
-+      Handle<Object> name_index =
-+          Call(isolate, csa_lookup, map, names[i]).ToHandleChecked();
-+      CHECK(name_index->IsSmi());
-+      CHECK_EQ(DescriptorArray::ToKeyIndex(static_cast<int>(i)),
-+               Smi::ToInt(*name_index));
-+    }
-+  }
-+}
-+
-+void CheckTransitionArrayLookups(Isolate* isolate,
-+                                 Handle<TransitionArray> transitions,
-+                                 std::vector<Handle<Map>>& maps,
-+                                 Handle<JSFunction> csa_lookup) {
-+  // Test C++ implementation.
-+  {
-+    DisallowHeapAllocation no_gc;
-+    DCHECK(transitions->IsSortedNoDuplicates());
-+
-+    for (size_t i = 0; i < maps.size(); ++i) {
-+      Map expected_map = *maps[i];
-+      Name name =
-+          expected_map.instance_descriptors().GetKey(expected_map.LastAdded());
-+
-+      Map map = transitions->SearchAndGetTargetForTesting(PropertyKind::kData,
-+                                                          name, NONE);
-+      CHECK(!map.is_null());
-+      CHECK_EQ(expected_map, map);
-+    }
-+  }
-+
-+  // Test CSA implementation.
-+  if (!FLAG_jitless) {
-+    for (size_t i = 0; i < maps.size(); ++i) {
-+      Handle<Map> expected_map = maps[i];
-+      Handle<Name> name(expected_map->instance_descriptors().GetKey(
-+                            expected_map->LastAdded()),
-+                        isolate);
-+
-+      Handle<Object> transition_map =
-+          Call(isolate, csa_lookup, transitions, name).ToHandleChecked();
-+      CHECK(transition_map->IsMap());
-+      CHECK_EQ(*expected_map, *transition_map);
-+    }
-+  }
-+}
-+
-+// Creates function with (Map, Name) arguments. Returns Smi with the index of
-+// the name value of the found descriptor (DescriptorArray::ToKeyIndex())
-+// or null otherwise.
-+Handle<JSFunction> CreateCsaDescriptorArrayLookup(Isolate* isolate) {
-+  // We are not allowed to generate code in jitless mode.
-+  if (FLAG_jitless) return Handle<JSFunction>();
-+
-+  // Preallocate handle for the result in the current handle scope.
-+  Handle<JSFunction> result_function(JSFunction{}, isolate);
-+
-+  const int kNumParams = 2;
-+
-+  compiler::CodeAssemblerTester asm_tester(
-+      isolate, kNumParams + 1,  // +1 to include receiver.
-+      CodeKind::STUB);
-+  {
-+    CodeStubAssembler m(asm_tester.state());
-+
-+    TNode<Map> map = m.CAST(m.Parameter(1));
-+    TNode<Name> unique_name = m.CAST(m.Parameter(2));
-+
-+    Label passed(&m), failed(&m);
-+    Label if_found(&m), if_not_found(&m);
-+    TVariable<IntPtrT> var_name_index(&m);
-+
-+    TNode<Uint32T> bit_field3 = m.LoadMapBitField3(map);
-+    TNode<DescriptorArray> descriptors = m.LoadMapDescriptors(map);
-+
-+    m.DescriptorLookup(unique_name, descriptors, bit_field3, &if_found,
-+                       &var_name_index, &if_not_found);
-+
-+    m.BIND(&if_found);
-+    m.Return(m.SmiTag(var_name_index.value()));
-+
-+    m.BIND(&if_not_found);
-+    m.Return(m.NullConstant());
-+  }
-+
-+  {
-+    compiler::FunctionTester ft(asm_tester.GenerateCode(), kNumParams);
-+    // Copy function value to a handle created in the outer handle scope.
-+    *(result_function.location()) = ft.function->ptr();
-+  }
-+
-+  return result_function;
-+}
-+
-+// Creates function with (TransitionArray, Name) arguments. Returns transition
-+// map if transition is found or null otherwise.
-+Handle<JSFunction> CreateCsaTransitionArrayLookup(Isolate* isolate) {
-+  // We are not allowed to generate code in jitless mode.
-+  if (FLAG_jitless) return Handle<JSFunction>();
-+
-+  // Preallocate handle for the result in the current handle scope.
-+  Handle<JSFunction> result_function(JSFunction{}, isolate);
-+
-+  const int kNumParams = 2;
-+  compiler::CodeAssemblerTester asm_tester(
-+      isolate, kNumParams + 1,  // +1 to include receiver.
-+      CodeKind::STUB);
-+  {
-+    CodeStubAssembler m(asm_tester.state());
-+
-+    TNode<TransitionArray> transitions = m.CAST(m.Parameter(1));
-+    TNode<Name> unique_name = m.CAST(m.Parameter(2));
-+
-+    Label passed(&m), failed(&m);
-+    Label if_found(&m), if_not_found(&m);
-+    TVariable<IntPtrT> var_name_index(&m);
-+
-+    m.TransitionLookup(unique_name, transitions, &if_found, &var_name_index,
-+                       &if_not_found);
-+
-+    m.BIND(&if_found);
-+    {
-+      STATIC_ASSERT(kData == 0);
-+      STATIC_ASSERT(NONE == 0);
-+      const int kKeyToTargetOffset = (TransitionArray::kEntryTargetIndex -
-+                                      TransitionArray::kEntryKeyIndex) *
-+                                     kTaggedSize;
-+      TNode<Map> transition_map = m.CAST(m.GetHeapObjectAssumeWeak(
-+          m.LoadArrayElement(transitions, WeakFixedArray::kHeaderSize,
-+                             var_name_index.value(), kKeyToTargetOffset)));
-+      m.Return(transition_map);
-+    }
-+
-+    m.BIND(&if_not_found);
-+    m.Return(m.NullConstant());
-+  }
-+
-+  {
-+    compiler::FunctionTester ft(asm_tester.GenerateCode(), kNumParams);
-+    // Copy function value to a handle created in the outer handle scope.
-+    *(result_function.location()) = ft.function->ptr();
-+  }
-+
-+  return result_function;
-+}
-+
-+}  // namespace
-+
-+TEST(DescriptorArrayHashCollisionMassive) {
-+  CcTest::InitializeVM();
-+  Isolate* isolate = CcTest::i_isolate();
-+  HandleScope handle_scope(isolate);
-+
-+  static_assert(Name::kNofHashBitFields == 2, "This test needs updating");
-+
-+  std::vector<Handle<Name>> names;
-+
-+  // Use the same hash value for all names.
-+  uint32_t hash =
-+      static_cast<uint32_t>(isolate->GenerateIdentityHash(Name::kHashBitMask));
-+
-+  for (int i = 0; i < kMaxNumberOfDescriptors / 2; ++i) {
-+    // Add pairs of names having the same base hash value but having different
-+    // values of is_integer bit.
-+    bool first_is_integer = (i & 1) != 0;
-+    bool second_is_integer = (i & 2) != 0;
-+
-+    names.push_back(NewNameWithHash(isolate, "a", hash, first_is_integer));
-+    names.push_back(NewNameWithHash(isolate, "b", hash, second_is_integer));
-+  }
-+
-+  // Create descriptor array with the created names by appending fields to some
-+  // map. DescriptorArray marking relies on the fact that it's attached to an
-+  // owning map.
-+  Handle<Map> map = Map::Create(isolate, 0);
-+
-+  Handle<FieldType> any_type = FieldType::Any(isolate);
-+
-+  for (size_t i = 0; i < names.size(); ++i) {
-+    map = Map::CopyWithField(isolate, map, names[i], any_type, NONE,
-+                             PropertyConstness::kMutable,
-+                             Representation::Tagged(), OMIT_TRANSITION)
-+              .ToHandleChecked();
-+  }
-+
-+  Handle<JSFunction> csa_lookup = CreateCsaDescriptorArrayLookup(isolate);
-+
-+  CheckDescriptorArrayLookups(isolate, map, names, csa_lookup);
-+
-+  // Sort descriptor array and check it again.
-+  map->instance_descriptors().Sort();
-+  CheckDescriptorArrayLookups(isolate, map, names, csa_lookup);
-+}
-+
-+TEST(DescriptorArrayHashCollision) {
-+  CcTest::InitializeVM();
-+  Isolate* isolate = CcTest::i_isolate();
-+  HandleScope handle_scope(isolate);
-+
-+  static_assert(Name::kNofHashBitFields == 2, "This test needs updating");
-+
-+  std::vector<Handle<Name>> names;
-+  uint32_t hash = 0;
-+
-+  for (int i = 0; i < kMaxNumberOfDescriptors / 2; ++i) {
-+    if (i % 2 == 0) {
-+      // Change hash value for every pair of names.
-+      hash = static_cast<uint32_t>(
-+          isolate->GenerateIdentityHash(Name::kHashBitMask));
-+    }
-+
-+    // Add pairs of names having the same base hash value but having different
-+    // values of is_integer bit.
-+    bool first_is_integer = (i & 1) != 0;
-+    bool second_is_integer = (i & 2) != 0;
-+
-+    names.push_back(NewNameWithHash(isolate, "a", hash, first_is_integer));
-+    names.push_back(NewNameWithHash(isolate, "b", hash, second_is_integer));
-+  }
-+
-+  // Create descriptor array with the created names by appending fields to some
-+  // map. DescriptorArray marking relies on the fact that it's attached to an
-+  // owning map.
-+  Handle<Map> map = Map::Create(isolate, 0);
-+
-+  Handle<FieldType> any_type = FieldType::Any(isolate);
-+
-+  for (size_t i = 0; i < names.size(); ++i) {
-+    map = Map::CopyWithField(isolate, map, names[i], any_type, NONE,
-+                             PropertyConstness::kMutable,
-+                             Representation::Tagged(), OMIT_TRANSITION)
-+              .ToHandleChecked();
-+  }
-+
-+  Handle<JSFunction> csa_lookup = CreateCsaDescriptorArrayLookup(isolate);
-+
-+  CheckDescriptorArrayLookups(isolate, map, names, csa_lookup);
-+
-+  // Sort descriptor array and check it again.
-+  map->instance_descriptors().Sort();
-+  CheckDescriptorArrayLookups(isolate, map, names, csa_lookup);
-+}
-+
-+TEST(TransitionArrayHashCollisionMassive) {
-+  CcTest::InitializeVM();
-+  Isolate* isolate = CcTest::i_isolate();
-+  HandleScope handle_scope(isolate);
-+
-+  static_assert(Name::kNofHashBitFields == 2, "This test needs updating");
-+
-+  std::vector<Handle<Name>> names;
-+
-+  // Use the same hash value for all names.
-+  uint32_t hash =
-+      static_cast<uint32_t>(isolate->GenerateIdentityHash(Name::kHashBitMask));
-+
-+  for (int i = 0; i < TransitionsAccessor::kMaxNumberOfTransitions / 2; ++i) {
-+    // Add pairs of names having the same base hash value but having different
-+    // values of is_integer bit.
-+    bool first_is_integer = (i & 1) != 0;
-+    bool second_is_integer = (i & 2) != 0;
-+
-+    names.push_back(NewNameWithHash(isolate, "a", hash, first_is_integer));
-+    names.push_back(NewNameWithHash(isolate, "b", hash, second_is_integer));
-+  }
-+
-+  // Create transitions for each name.
-+  Handle<Map> root_map = Map::Create(isolate, 0);
-+
-+  std::vector<Handle<Map>> maps;
-+
-+  Handle<FieldType> any_type = FieldType::Any(isolate);
-+
-+  for (size_t i = 0; i < names.size(); ++i) {
-+    Handle<Map> map =
-+        Map::CopyWithField(isolate, root_map, names[i], any_type, NONE,
-+                           PropertyConstness::kMutable,
-+                           Representation::Tagged(), INSERT_TRANSITION)
-+            .ToHandleChecked();
-+    maps.push_back(map);
-+  }
-+
-+  Handle<JSFunction> csa_lookup = CreateCsaTransitionArrayLookup(isolate);
-+
-+  Handle<TransitionArray> transition_array(
-+      TestTransitionsAccessor(isolate, root_map).transitions(), isolate);
-+
-+  CheckTransitionArrayLookups(isolate, transition_array, maps, csa_lookup);
-+
-+  // Sort transition array and check it again.
-+  transition_array->Sort();
-+  CheckTransitionArrayLookups(isolate, transition_array, maps, csa_lookup);
-+}
-+
-+TEST(TransitionArrayHashCollision) {
-+  CcTest::InitializeVM();
-+  Isolate* isolate = CcTest::i_isolate();
-+  HandleScope handle_scope(isolate);
-+
-+  static_assert(Name::kNofHashBitFields == 2, "This test needs updating");
-+
-+  std::vector<Handle<Name>> names;
-+
-+  // Use the same hash value for all names.
-+  uint32_t hash =
-+      static_cast<uint32_t>(isolate->GenerateIdentityHash(Name::kHashBitMask));
-+
-+  for (int i = 0; i < TransitionsAccessor::kMaxNumberOfTransitions / 2; ++i) {
-+    if (i % 2 == 0) {
-+      // Change hash value for every pair of names.
-+      hash = static_cast<uint32_t>(
-+          isolate->GenerateIdentityHash(Name::kHashBitMask));
-+    }
-+    // Add pairs of names having the same base hash value but having different
-+    // values of is_integer bit.
-+    bool first_is_integer = (i & 1) != 0;
-+    bool second_is_integer = (i & 2) != 0;
-+
-+    names.push_back(NewNameWithHash(isolate, "a", hash, first_is_integer));
-+    names.push_back(NewNameWithHash(isolate, "b", hash, second_is_integer));
-+  }
-+
-+  // Create transitions for each name.
-+  Handle<Map> root_map = Map::Create(isolate, 0);
-+
-+  std::vector<Handle<Map>> maps;
-+
-+  Handle<FieldType> any_type = FieldType::Any(isolate);
-+
-+  for (size_t i = 0; i < names.size(); ++i) {
-+    Handle<Map> map =
-+        Map::CopyWithField(isolate, root_map, names[i], any_type, NONE,
-+                           PropertyConstness::kMutable,
-+                           Representation::Tagged(), INSERT_TRANSITION)
-+            .ToHandleChecked();
-+    maps.push_back(map);
-+  }
-+
-+  Handle<JSFunction> csa_lookup = CreateCsaTransitionArrayLookup(isolate);
-+
-+  Handle<TransitionArray> transition_array(
-+      TestTransitionsAccessor(isolate, root_map).transitions(), isolate);
-+
-+  CheckTransitionArrayLookups(isolate, transition_array, maps, csa_lookup);
-+
-+  // Sort transition array and check it again.
-+  transition_array->Sort();
-+  CheckTransitionArrayLookups(isolate, transition_array, maps, csa_lookup);
-+}
-+
-+}  // namespace internal
-+}  // namespace v8
-diff --git a/test/cctest/test-transitions.h b/test/cctest/test-transitions.h
-index 724eb3d3c544b5e9535e7a1b14d95eccec34f4cc..66bbbfa76dd7c2aa4c84363a69705d2564fee8a6 100644
---- a/test/cctest/test-transitions.h
-+++ b/test/cctest/test-transitions.h
-@@ -24,6 +24,8 @@ class TestTransitionsAccessor : public TransitionsAccessor {
-   bool IsFullTransitionArrayEncoding() {
-     return encoding() == kFullTransitionArray;
-   }
-+
-+  TransitionArray transitions() { return TransitionsAccessor::transitions(); }
- };
- 
- }  // namespace internal
diff --git a/patches/v8/wasm_do_not_log_code_of_functions_whose_module_is_not_fully_loaded.patch b/patches/v8/wasm_do_not_log_code_of_functions_whose_module_is_not_fully_loaded.patch
index fc1234d6f..681f92936 100644
--- a/patches/v8/wasm_do_not_log_code_of_functions_whose_module_is_not_fully_loaded.patch
+++ b/patches/v8/wasm_do_not_log_code_of_functions_whose_module_is_not_fully_loaded.patch
@@ -101,56 +101,3 @@ index 4b176f3ba61bcdfb922c5f5cbb92981d79393ffa..6960c224c32d3c8b237f973ecc399c49
    void SetWireBytes(OwnedVector<const uint8_t> wire_bytes);
  
    WasmCode* Lookup(Address) const;
-diff --git a/test/cctest/wasm/test-streaming-compilation.cc b/test/cctest/wasm/test-streaming-compilation.cc
-index 4d3f83daff766edb96d25934bb7ab5564f193046..87da8ea1d62b14f792e9525f5707fb4b4e05cd94 100644
---- a/test/cctest/wasm/test-streaming-compilation.cc
-+++ b/test/cctest/wasm/test-streaming-compilation.cc
-@@ -1248,6 +1248,48 @@ STREAM_TEST(TestSetModuleCodeSection) {
-   CHECK(tester.IsPromiseFulfilled());
- }
- 
-+// Test that profiler does not crash when module is only partly compiled.
-+STREAM_TEST(TestProfilingMidStreaming) {
-+  StreamTester tester;
-+  v8::Isolate* isolate = CcTest::isolate();
-+  Isolate* i_isolate = CcTest::i_isolate();
-+  Zone* zone = tester.zone();
-+
-+  // Build module with one exported (named) function.
-+  ZoneBuffer buffer(zone);
-+  {
-+    TestSignatures sigs;
-+    WasmModuleBuilder builder(zone);
-+    WasmFunctionBuilder* f = builder.AddFunction(sigs.v_v());
-+    uint8_t code[] = {kExprEnd};
-+    f->EmitCode(code, arraysize(code));
-+    builder.AddExport(VectorOf("foo", 3), f);
-+    builder.WriteTo(&buffer);
-+  }
-+
-+  // Start profiler to force code logging.
-+  v8::CpuProfiler* cpu_profiler = v8::CpuProfiler::New(isolate);
-+  v8::CpuProfilingOptions profile_options;
-+  cpu_profiler->StartProfiling(v8::String::Empty(isolate), profile_options);
-+
-+  // Send incomplete wire bytes and start compilation.
-+  tester.OnBytesReceived(buffer.begin(), buffer.end() - buffer.begin());
-+  tester.RunCompilerTasks();
-+
-+  // Trigger code logging explicitly like the profiler would do.
-+  CHECK(WasmCode::ShouldBeLogged(i_isolate));
-+  i_isolate->wasm_engine()->LogOutstandingCodesForIsolate(i_isolate);
-+  CHECK(tester.IsPromisePending());
-+
-+  // Finalize stream, stop profiler and clean up.
-+  tester.FinishStream();
-+  CHECK(tester.IsPromiseFulfilled());
-+  v8::CpuProfile* profile =
-+      cpu_profiler->StopProfiling(v8::String::Empty(isolate));
-+  profile->Delete();
-+  cpu_profiler->Dispose();
-+}
-+
- #undef STREAM_TEST
- 
- }  // namespace wasm
-- 
2.26.2

